
variables:
  # Versions
  MENDER_REV: "master"
  META_MENDER_REV: "master"
  POKY_REV: "zeus"
  MENDER_QA_REV: "master"
  MENDER_ARTIFACT_REV: "master"
  MENDER_CONDUCTOR_REV: "master"
  MENDER_CONDUCTOR_ENTERPRISE_REV: "master"
  DEPLOYMENTS_REV: "master"
  DEPLOYMENTS_ENTERPRISE_REV: "master"
  DEVICEAUTH_REV: "master"
  GUI_REV: "master"
  INVENTORY_REV: "master"
  INVENTORY_ENTERPRISE_REV: "master"
  USERADM_REV: "master"
  USERADM_ENTERPRISE_REV: "master"
  MENDER_API_GATEWAY_DOCKER_REV: "master"
  MENDER_CLI_REV: "master"
  INTEGRATION_REV: "master"
  TENANTADM_REV: "master"
  WORKFLOWS_REV: "master"
  WORKFLOWS_ENTERPRISE_REV: "master"
  CREATE_ARTIFACT_WORKER_REV: "master"
  MENDER_STRESS_TEST_CLIENT_REV: "master"
  META_OPENEMBEDDED_REV: "zeus"
  META_RASPBERRYPI_REV: "zeus"
  MENDER_IMAGE_TESTS_REV: "master"
  BASE_BRANCH: "master"

  # Build stage
  BUILD_CLIENT: "true"
  BUILD_SERVERS: "true"

  # Client test stage
  BUILD_QEMUX86_64_UEFI_GRUB: "true"
  TEST_QEMUX86_64_UEFI_GRUB: "true"
  BUILD_QEMUX86_64_BIOS_GRUB: "true"
  TEST_QEMUX86_64_BIOS_GRUB: "true"
  BUILD_QEMUX86_64_BIOS_GRUB_GPT: "true"
  TEST_QEMUX86_64_BIOS_GRUB_GPT: "true"
  BUILD_VEXPRESS_QEMU_UBOOT_UEFI_GRUB: "true"
  TEST_VEXPRESS_QEMU_UBOOT_UEFI_GRUB: "true"
  BUILD_VEXPRESS_QEMU: "true"
  TEST_VEXPRESS_QEMU: "true"
  BUILD_VEXPRESS_QEMU_FLASH: "true"
  TEST_VEXPRESS_QEMU_FLASH: "true"
  BUILD_BEAGLEBONEBLACK: "true"
  TEST_BEAGLEBONEBLACK: "false"
  BUILD_RASPBERRYPI3: "false"
  TEST_RASPBERRYPI3: "false"
  BUILD_RASPBERRYPI4: "false"
  TEST_RASPBERRYPI4: "false"

  # Integration and backend integration tests
  RUN_INTEGRATION_TESTS: "true"
  SPECIFIC_INTEGRATION_TEST: ""
  TESTS_IN_PARALLEL: "2"

  # Publication
  PUBLISH_DOCKER_CLIENT_IMAGES: "false"

  # Debugging options
  WAIT_IN_STAGE_INIT: ""
  WAIT_IN_STAGE_BUILD: ""
  WAIT_IN_STAGE_TEST: ""

  # Maintenance
  CLEAN_BUILD_CACHE: ""

  # Internal address for nfs sstate cache server (northamerica-northeast1-b)
  SSTATE_CACHE_INTRNL_ADDR: 10.162.0.2

  # Global environment variables (not meant to be changed)
  DEBIAN_FRONTEND: noninteractive

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits-signoffs.yml'

stages:
  # .pre and .post have no effect and are only for documentation purposes. .pre
  # and .post stages run at the very start and very end of a pipeline,
  # regardless of where they are defined.
  - init
  - build
  - test
  - publish
  - release

init_workspace:
  stage: init
  image: alpine:latest
  tags:
    - mender-qa-slave-highcpu
  script:
    # Traps only work if executed in a sub shell.
    - "("

    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt

    - function handle_exit() {
      ${CI_PROJECT_DIR}/scripts/maybe-wait-in-stage.sh WAIT_IN_STAGE_INIT ${CI_PROJECT_DIR}/WAIT_IN_STAGE_INIT;
      };
      trap handle_exit EXIT

    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - apk --update add git openssh bash python3 curl py3-pip jq
    - pip3 install --upgrade pyyaml

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

    # Prepare SSH keys
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts

    # Clean WORKSPACE and clone all repos
    - find ${WORKSPACE}
      -mindepth 1
      -maxdepth 1
      -not -name $(basename ${CI_PROJECT_DIR})
      -exec rm -rf '{}' ';'
    - cd ${WORKSPACE}
    - git init . && git remote add origin https://github.com/mendersoftware/poky
    - git fetch && git checkout -f origin/${POKY_REV}
    - echo -e "# $(git log -n1 --oneline)\nexport POKY_REV=$POKY_REV\nexport POKY_REV_GIT_SHA=$(git rev-parse HEAD)" > ${CI_PROJECT_DIR}/build_revisions.env

    # Add MENDER_QA_REV, which is special, since it is this repository.
    - if echo "$CI_BUILD_REF_NAME" | egrep '^pr_[0-9]+$'; then
        export MENDER_QA_REV="pull/$(echo "$CI_BUILD_REF_NAME" | egrep -o '[0-9]+')/head";
      else
        export MENDER_QA_REV="$CI_BUILD_REF_NAME";
      fi
    - (cd mender-qa && echo -e "# $(git log -n1 --oneline)\nexport MENDER_QA_REV=$MENDER_QA_REV\nexport MENDER_QA_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone https://github.com/mendersoftware/integration
    - (cd integration &&
      git fetch -u -f origin ${INTEGRATION_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${INTEGRATION_REV})
    - (cd integration && echo -e "# $(git log -n1 --oneline)\nexport INTEGRATION_REV=$INTEGRATION_REV\nexport INTEGRATION_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    # Add other repositories.
    - git clone https://github.com/mendersoftware/meta-mender
    - (cd meta-mender &&
      git fetch -u -f origin ${META_MENDER_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${META_MENDER_REV})
    - (cd meta-mender && echo -e "# $(git log -n1 --oneline)\nexport META_MENDER_REV=$META_MENDER_REV\nexport META_MENDER_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone https://github.com/mendersoftware/mender go/src/github.com/mendersoftware/mender
    - (cd go/src/github.com/mendersoftware/mender &&
      git fetch -u -f origin ${MENDER_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${MENDER_REV})
    - (cd go/src/github.com/mendersoftware/mender && echo -e "# $(git log -n1 --oneline)\nexport MENDER_REV=$MENDER_REV\nexport MENDER_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone https://github.com/mendersoftware/deployments go/src/github.com/mendersoftware/deployments
    - (cd go/src/github.com/mendersoftware/deployments &&
      git fetch -u -f origin ${DEPLOYMENTS_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${DEPLOYMENTS_REV})
    - (cd go/src/github.com/mendersoftware/deployments && echo -e "# $(git log -n1 --oneline)\nexport DEPLOYMENTS_REV=$DEPLOYMENTS_REV\nexport DEPLOYMENTS_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone git@github.com:mendersoftware/deployments-enterprise go/src/github.com/mendersoftware/deployments-enterprise
    - (cd go/src/github.com/mendersoftware/deployments-enterprise &&
      git fetch -u -f origin ${DEPLOYMENTS_ENTERPRISE_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${DEPLOYMENTS_ENTERPRISE_REV})
    - (cd go/src/github.com/mendersoftware/deployments-enterprise && echo -e "# $(git log -n1 --oneline)\nexport DEPLOYMENTS_ENTERPRISE_REV=$DEPLOYMENTS_ENTERPRISE_REV\nexport DEPLOYMENTS_ENTERPRISE_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone https://github.com/mendersoftware/deviceauth go/src/github.com/mendersoftware/deviceauth
    - (cd go/src/github.com/mendersoftware/deviceauth &&
      git fetch -u -f origin ${DEVICEAUTH_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${DEVICEAUTH_REV})
    - (cd go/src/github.com/mendersoftware/deviceauth && echo -e "# $(git log -n1 --oneline)\nexport DEVICEAUTH_REV=$DEVICEAUTH_REV\nexport DEVICEAUTH_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone https://github.com/mendersoftware/gui
    - (cd gui &&
      git fetch -u -f origin ${GUI_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${GUI_REV})
    - (cd gui && echo -e "# $(git log -n1 --oneline)\nexport GUI_REV=$GUI_REV\nexport GUI_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone https://github.com/mendersoftware/inventory go/src/github.com/mendersoftware/inventory
    - (cd go/src/github.com/mendersoftware/inventory &&
      git fetch -u -f origin ${INVENTORY_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${INVENTORY_REV})
    - (cd go/src/github.com/mendersoftware/inventory && echo -e "# $(git log -n1 --oneline)\nexport INVENTORY_REV=$INVENTORY_REV\nexport INVENTORY_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)


    - git clone git@github.com:mendersoftware/inventory-enterprise.git go/src/github.com/mendersoftware/inventory-enterprise
    - (cd go/src/github.com/mendersoftware/inventory-enterprise &&
      git fetch -u -f origin ${INVENTORY_ENTERPRISE_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${INVENTORY_ENTERPRISE_REV})
    - (cd go/src/github.com/mendersoftware/inventory-enterprise && echo -e "# $(git log -n1 --oneline)\nexport INVENTORY_ENTERPRISE_REV=$INVENTORY_ENTERPRISE_REV\nexport INVENTORY_ENTERPRISE_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone https://github.com/mendersoftware/useradm go/src/github.com/mendersoftware/useradm
    - (cd go/src/github.com/mendersoftware/useradm &&
      git fetch -u -f origin ${USERADM_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${USERADM_REV})
    - (cd go/src/github.com/mendersoftware/useradm && echo -e "# $(git log -n1 --oneline)\nexport USERADM_REV=$USERADM_REV\nexport USERADM_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone git@github.com:mendersoftware/useradm-enterprise go/src/github.com/mendersoftware/useradm-enterprise
    - (cd go/src/github.com/mendersoftware/useradm-enterprise &&
      git fetch -u -f origin ${USERADM_ENTERPRISE_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${USERADM_ENTERPRISE_REV})
    - (cd go/src/github.com/mendersoftware/useradm-enterprise && echo -e "# $(git log -n1 --oneline)\nexport USERADM_ENTERPRISE_REV=$USERADM_ENTERPRISE_REV\nexport USERADM_ENTERPRISE_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone https://github.com/mendersoftware/mender-api-gateway-docker
    - (cd mender-api-gateway-docker &&
      git fetch -u -f origin ${MENDER_API_GATEWAY_DOCKER_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${MENDER_API_GATEWAY_DOCKER_REV})
    - (cd mender-api-gateway-docker && echo -e "# $(git log -n1 --oneline)\nexport MENDER_API_GATEWAY_DOCKER_REV=$MENDER_API_GATEWAY_DOCKER_REV\nexport MENDER_API_GATEWAY_DOCKER_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone https://github.com/mendersoftware/mender-stress-test-client go/src/github.com/mendersoftware/mender-stress-test-client
    - (cd go/src/github.com/mendersoftware/mender-stress-test-client &&
      git fetch -u -f origin ${MENDER_STRESS_TEST_CLIENT_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${MENDER_STRESS_TEST_CLIENT_REV})
    - (cd go/src/github.com/mendersoftware/mender-stress-test-client && echo -e "# $(git log -n1 --oneline)\nexport MENDER_STRESS_TEST_CLIENT_REV=$MENDER_STRESS_TEST_CLIENT_REV\nexport MENDER_STRESS_TEST_CLIENT_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone https://github.com/mendersoftware/mender-artifact go/src/github.com/mendersoftware/mender-artifact
    - (cd go/src/github.com/mendersoftware/mender-artifact &&
      git fetch -u -f origin ${MENDER_ARTIFACT_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${MENDER_ARTIFACT_REV})
    - (cd go/src/github.com/mendersoftware/mender-artifact && echo -e "# $(git log -n1 --oneline)\nexport MENDER_ARTIFACT_REV=$MENDER_ARTIFACT_REV\nexport MENDER_ARTIFACT_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone git@github.com:mendersoftware/tenantadm go/src/github.com/mendersoftware/tenantadm
    - (cd go/src/github.com/mendersoftware/tenantadm &&
      git fetch -u -f origin ${TENANTADM_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${TENANTADM_REV})
    - (cd go/src/github.com/mendersoftware/tenantadm && echo -e "# $(git log -n1 --oneline)\nexport TENANTADM_REV=$TENANTADM_REV\nexport TENANTADM_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone git@github.com:mendersoftware/workflows go/src/github.com/mendersoftware/workflows
    - (cd go/src/github.com/mendersoftware/workflows &&
      git fetch -u -f origin ${WORKFLOWS_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${WORKFLOWS_REV})
    - (cd go/src/github.com/mendersoftware/workflows && echo -e "# $(git log -n1 --oneline)\nexport WORKFLOWS_REV=$WORKFLOWS_REV\nexport WORKFLOWS_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone git@github.com:mendersoftware/workflows-enterprise go/src/github.com/mendersoftware/workflows-enterprise
    - (cd go/src/github.com/mendersoftware/workflows-enterprise &&
      git fetch -u -f origin ${WORKFLOWS_ENTERPRISE_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${WORKFLOWS_ENTERPRISE_REV})
    - (cd go/src/github.com/mendersoftware/workflows-enterprise && echo -e "# $(git log -n1 --oneline)\nexport WORKFLOWS_ENTERPRISE_REV=$WORKFLOWS_ENTERPRISE_REV\nexport WORKFLOWS_ENTERPRISE_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone git@github.com:mendersoftware/create-artifact-worker go/src/github.com/mendersoftware/create-artifact-worker
    - (cd go/src/github.com/mendersoftware/create-artifact-worker &&
      git fetch -u -f origin ${CREATE_ARTIFACT_WORKER_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${CREATE_ARTIFACT_WORKER_REV})
    - (cd go/src/github.com/mendersoftware/create-artifact-worker && echo -e "# $(git log -n1 --oneline)\nexport CREATE_ARTIFACT_WORKER_REV=$CREATE_ARTIFACT_WORKER_REV\nexport CREATE_ARTIFACT_WORKER_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone git://git.openembedded.org/meta-openembedded.git
    - (cd meta-openembedded && git checkout -f ${META_OPENEMBEDDED_REV})
    - (cd meta-openembedded && echo -e "# $(git log -n1 --oneline)\nexport META_OPENEMBEDDED_REV=$META_OPENEMBEDDED_REV\nexport META_OPENEMBEDDED_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone git://github.com/agherzan/meta-raspberrypi.git
    - (cd meta-raspberrypi && git checkout -f ${META_RASPBERRYPI_REV})
    - (cd meta-raspberrypi && echo -e "# $(git log -n1 --oneline)\nexport META_RASPBERRYPI_REV=$META_RASPBERRYPI_REV\nexport META_RASPBERRYPI_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone git://github.com/mendersoftware/mender-conductor.git go/src/github.com/mendersoftware/mender-conductor
    - (cd go/src/github.com/mendersoftware/mender-conductor &&
      git fetch -u -f origin ${MENDER_CONDUCTOR_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${MENDER_CONDUCTOR_REV})
    - (cd go/src/github.com/mendersoftware/mender-conductor && echo -e "# $(git log -n1 --oneline)\nexport MENDER_CONDUCTOR_REV=$MENDER_CONDUCTOR_REV\nexport MENDER_CONDUCTOR_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone git@github.com:mendersoftware/mender-conductor-enterprise.git go/src/github.com/mendersoftware/mender-conductor-enterprise
    - (cd go/src/github.com/mendersoftware/mender-conductor-enterprise &&
      git fetch -u -f origin ${MENDER_CONDUCTOR_ENTERPRISE_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${MENDER_CONDUCTOR_ENTERPRISE_REV})
    - (cd go/src/github.com/mendersoftware/mender-conductor-enterprise && echo -e "# $(git log -n1 --oneline)\nexport MENDER_CONDUCTOR_ENTERPRISE_REV=$MENDER_CONDUCTOR_ENTERPRISE_REV\nexport MENDER_CONDUCTOR_ENTERPRISE_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone https://github.com/mendersoftware/mender-cli.git go/src/github.com/mendersoftware/mender-cli
    - (cd go/src/github.com/mendersoftware/mender-cli &&
      git fetch -u -f origin ${MENDER_CLI_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${MENDER_CLI_REV})
    - (cd go/src/github.com/mendersoftware/mender-cli && echo -e "# $(git log -n1 --oneline)\nexport MENDER_CLI_REV=$MENDER_CLI_REV\nexport MENDER_CLI_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - git clone https://github.com/mendersoftware/mender-image-tests
    - (cd mender-image-tests &&
      git fetch -u -f origin ${MENDER_IMAGE_TESTS_REV}:pr &&
      git checkout pr ||
      git checkout -f -b pr ${MENDER_IMAGE_TESTS_REV})
    - (cd mender-image-tests && echo -e "# $(git log -n1 --oneline)\nexport MENDER_IMAGE_TESTS_REV=$MENDER_IMAGE_TESTS_REV\nexport MENDER_IMAGE_TESTS_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env)

    - cat ${CI_PROJECT_DIR}/build_revisions.env
    - tar -czf /tmp/workspace.tar.gz .
    - mv /tmp/workspace.tar.gz ${CI_PROJECT_DIR}/workspace.tar.gz

    # Always keep this at the end of the script stage
    - echo "success" > /JOB_RESULT.txt

    - ")"

  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    paths:
      - workspace.tar.gz
      - build_revisions.env

.template_build_test_acc: &build_and_test_acceptance
  image: teracy/ubuntu:18.04-dind-18.09.9
  services:
  - docker:18-dind
  tags:
    - mender-qa-slave-highcpu
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt
    # Check correct dind setup
    - docker version
    # Export required yoctobuild script variables
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - export GOPATH="$WORKSPACE/go"
    # This template is used in both build and acc test stages,
    # for build stage, force default configuration QEMUX86_64_UEFI_GRUB
    - test -n "$ONLY_BUILD" && export BUILD_QEMUX86_64_UEFI_GRUB=true
    - test -n "$ONLY_BUILD" && export TEST_QEMUX86_64_UEFI_GRUB=false
    - export RUN_INTEGRATION_TESTS=false
    # basic tools
    - apt-get update -q
    - apt-get install -qqy
      git wget gnupg2 pass autoconf automake build-essential diffstat gawk chrpath
      libsdl1.2-dev e2tools nfs-client s3cmd psmisc screen libssl-dev python-dev bash
      libxml2-dev libxslt-dev libffi-dev nodejs libyaml-dev sysbench texinfo pkg-config
      zlib1g-dev libaio-dev libbluetooth-dev libbrlapi-dev libbz2-dev libglib2.0-dev
      libfdt-dev libpixman-1-dev zlib1g-dev jq liblzo2-dev device-tree-compiler
      qemu-system-x86 qemu-system-arm bc kpartx liblzma-dev cpio sudo awscli gdisk
    # Prepare mender user
    - useradd -m -u 1010 mender || true
    - mkdir -p /home/mender/.ssh
    - echo "mender ALL=(ALL:ALL) NOPASSWD:ALL" >> /etc/sudoers
    - sed -i -e 's/^\( *Defaults *requiretty *\)$/# \1/' /etc/sudoers
    - chown -R mender:mender /home/mender
    - chown -R mender:mender ${WORKSPACE}
    - usermod -a -G docker mender
    # docker-compose from upstream
    - curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    # golang from upstream
    - wget -q https://storage.googleapis.com/golang/go1.12.linux-amd64.tar.gz
    - gunzip -c go1.12.linux-amd64.tar.gz | (cd /usr/local && tar x)
    - ln -sf /usr/local/go/bin/go /usr/local/bin/go
    - ln -sf /usr/local/go/bin/godoc /usr/local/bin/godoc
    - ln -sf /usr/local/go/bin/gofmt /usr/local/bin/gofmt
    # Python 2 pip
    - apt-get install -qqy python-pip
    - pip install --upgrade pip
    - pip2 install requests --upgrade
    - pip2 install pytest --upgrade
    - pip2 install filelock --upgrade
    - pip2 install pytest-xdist --upgrade
    - pip2 install pytest-html --upgrade
    - pip2 install -I fabric==1.14.0
    - pip2 install psutil --upgrade
    - pip2 install boto3 --upgrade
    - pip2 install pycrypto --upgrade
    # Python 3 pip
    - apt-get install -qqy python3-pip
    - pip3 install --upgrade pyyaml
    # Post job status
    - source ${CI_PROJECT_DIR}/build_revisions.env
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"
    # Locales
    - apt-get install locales
    - locale-gen --purge en_US.UTF-8
    - export LC_ALL=en_US.UTF-8
    - export LANG=en_US.UTF-8
    - export LANGUAGE=en_US.UTF-8
    # debugfs
    - cp /sbin/debugfs /usr/bin/ || echo "debugfs not in /sbin/"
    # sysstat monitoring suite for Debian/Ubuntu
    # collect cpu, load avg, memory and io usage every 2 secs forever
    # use 'sar' from sysstat to render the result file manually
    - apt-get install -qqy sysstat
    - sed -i 's/false/true/g' /etc/default/sysstat
    - service sysstat start
    - sar -P ALL 2 -o /var/log/sysstat/sysstat.log -uqrbS >/dev/null 2>&1 &
    # Setup KVM
    - usermod -a -G kvm mender
    - apt-get install -qqy kmod libvirt-bin qemu-utils qemu-kvm
    - apt-get install -qqy linux-modules-`uname -r`
    # Enable nesting VMs
    - modprobe -r kvm_intel
    - modprobe kvm_intel nested=Y
    # Enable NFS cache for yocto
    - apt-get install nfs-common
    - mkdir -p /mnt/sstate-cache
    - mount.nfs4 ${SSTATE_CACHE_INTRNL_ADDR}:/sstate-cache /mnt/sstate-cache
  script:
    # Traps only work if executed in a sub shell.
    - "("
    - mv workspace.tar.gz /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz

    - function handle_exit() {
      if test -n "$ONLY_BUILD"; then
      ${CI_PROJECT_DIR}/scripts/maybe-wait-in-stage.sh WAIT_IN_STAGE_BUILD ${CI_PROJECT_DIR}/WAIT_IN_STAGE_BUILD;
      else
      ${CI_PROJECT_DIR}/scripts/maybe-wait-in-stage.sh WAIT_IN_STAGE_TEST ${CI_PROJECT_DIR}/WAIT_IN_STAGE_TEST;
      fi;
      };
      trap handle_exit EXIT

    - source ${CI_PROJECT_DIR}/build_revisions.env
    - chown -R mender:mender ${WORKSPACE}
    - export HOME="/home/mender"
    - sudo -E -u mender ${WORKSPACE}/mender-qa/scripts/jenkins-yoctobuild-build.sh

    - if [ -d $WORKSPACE/meta-mender/tests/acceptance/coverage ]; then
        mkdir -p ${CI_PROJECT_DIR}/acceptance-tests-coverage;
        cp -r $WORKSPACE/meta-mender/tests/acceptance/coverage/* ${CI_PROJECT_DIR}/acceptance-tests-coverage;
      fi

    # Always keep this at the end of the script stage
    - echo "success" > /JOB_RESULT.txt

    - ")"

build_client:
  only:
    variables:
      - $BUILD_CLIENT == "true"
      - $RUN_INTEGRATION_TESTS == "true"
  stage: build
  dependencies:
    - init_workspace
  <<: *build_and_test_acceptance
  variables:
    JOB_BASE_NAME: mender_qemux86_64_uefi_grub
    ONLY_BUILD: "true"
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - mkdir -p stage-artifacts
    - docker save mendersoftware/mender-client-qemu:pr -o stage-artifacts/mender-client-qemu.tar
    - docker save mendersoftware/mender-client-qemu-rofs:pr -o stage-artifacts/mender-client-qemu-rofs.tar
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    paths:
      - stage-artifacts/
      - sysstat.log
      - sysstat.svg

build_servers:
  stage: build
  only:
    variables:
      - $BUILD_SERVERS == "true"
      - $RUN_INTEGRATION_TESTS == "true"
  dependencies:
    - init_workspace
  <<: *build_and_test_acceptance
  variables:
    JOB_BASE_NAME: mender_servers
    ONLY_BUILD: "true"
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - mkdir -p stage-artifacts
    - for repo in `${CI_PROJECT_DIR}/../integration/extra/release_tool.py -l docker`; do
        if ! echo $repo | grep -q mender-client-qemu; then
          docker_url=$(${CI_PROJECT_DIR}/../integration/extra/release_tool.py --map-name docker $repo docker_url);
          docker save $docker_url:pr -o stage-artifacts/${repo}.tar;
        fi;
      done
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    paths:
      - stage-artifacts/
      - sysstat.log
      - sysstat.svg

test_accep_qemux86_64_uefi_grub:
  only:
    # Even though the build for this configuration is done unconditionally in build_client job,
    # we will still trigger this one for BUILD_QEMUX86_64_UEFI_GRUB to be able to collect artifacts
    variables:
      - $BUILD_QEMUX86_64_UEFI_GRUB == "true"
      - $TEST_QEMUX86_64_UEFI_GRUB == "true"
  stage: test
  dependencies:
    - init_workspace
  <<: *build_and_test_acceptance
  variables:
    JOB_BASE_NAME: mender_qemux86_64_uefi_grub
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_QEMUX86_64_UEFI_GRUB" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_qemux86_64_uefi_grub.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_qemux86_64_uefi_grub.html;
      fi
    - mkdir -p stage-artifacts
    - cp $WORKSPACE/qemux86-64-uefi-grub/qemux86-64-uefi-grub_release_1_*.mender stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_qemux86_64_uefi_grub.xml
      - report_accep_qemux86_64_uefi_grub.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_qemux86_64_uefi_grub.xml

test_accep_vexpress_qemu:
  only:
    variables:
      - $BUILD_VEXPRESS_QEMU == "true"
      - $TEST_VEXPRESS_QEMU == "true"
  stage: test
  dependencies:
    - init_workspace
  <<: *build_and_test_acceptance
  variables:
    JOB_BASE_NAME: mender_vexpress_qemu
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_VEXPRESS_QEMU" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_vexpress_qemu.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_vexpress_qemu.html;
      fi
    - mkdir -p stage-artifacts
    - cp $WORKSPACE/vexpress-qemu/vexpress-qemu_release_1_*.mender stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_vexpress_qemu.xml
      - report_accep_vexpress_qemu.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_vexpress_qemu.xml

test_accep_qemux86_64_bios_grub:
  only:
    variables:
      - $BUILD_QEMUX86_64_BIOS_GRUB == "true"
      - $TEST_QEMUX86_64_BIOS_GRUB == "true"
  stage: test
  dependencies:
    - init_workspace
  <<: *build_and_test_acceptance
  variables:
    JOB_BASE_NAME: mender_qemux86_64_bios_grub
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_QEMUX86_64_BIOS_GRUB" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_qemux86_64_bios_grub.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_qemux86_64_bios_grub.html;
      fi
    - mkdir -p stage-artifacts
    - cp $WORKSPACE/qemux86-64-bios-grub/qemux86-64-bios-grub_release_1_*.mender stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_qemux86_64_bios_grub.xml
      - report_accep_qemux86_64_bios_grub.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_qemux86_64_bios_grub.xml

test_accep_qemux86_64_bios_grub_gpt:
  only:
    variables:
      - $BUILD_QEMUX86_64_BIOS_GRUB_GPT == "true"
      - $TEST_QEMUX86_64_BIOS_GRUB_GPT == "true"
  stage: test
  dependencies:
    - init_workspace
  <<: *build_and_test_acceptance
  variables:
    JOB_BASE_NAME: mender_qemux86_64_bios_grub_gpt
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_QEMUX86_64_BIOS_GRUB_GPT" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_qemux86_64_bios_grub_gpt.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_qemux86_64_bios_grub_gpt.html;
      fi
    - mkdir -p stage-artifacts
    - cp $WORKSPACE/qemux86-64-bios-grub-gpt/qemux86-64-bios-grub-gpt_release_1_*.mender stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_qemux86_64_bios_grub_gpt.xml
      - report_accep_qemux86_64_bios_grub_gpt.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_qemux86_64_bios_grub_gpt.xml

test_accep_vexpress_qemu_uboot_uefi_grub:
  only:
    variables:
      - $BUILD_VEXPRESS_QEMU_UBOOT_UEFI_GRUB == "true"
      - $TEST_VEXPRESS_QEMU_UBOOT_UEFI_GRUB == "true"
  stage: test
  dependencies:
    - init_workspace
  <<: *build_and_test_acceptance
  variables:
    JOB_BASE_NAME: mender_vexpress_qemu_uboot_uefi_grub
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_VEXPRESS_QEMU_UBOOT_UEFI_GRUB" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_vexpress_qemu_uboot_uefi_grub.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_vexpress_qemu_uboot_uefi_grub.html;
      fi
    - mkdir -p stage-artifacts
    - cp $WORKSPACE/vexpress-qemu-uboot-uefi-grub/vexpress-qemu-uboot-uefi-grub_release_1_*.mender stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_vexpress_qemu_uboot_uefi_grub.xml
      - report_accep_vexpress_qemu_uboot_uefi_grub.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_vexpress_qemu_uboot_uefi_grub.xml

# Note that vexpress-qemu-flash configuration does not generate a ext4 image so
# the build script does not generate the Mender Artifact neither.
# This job collects the .ubifs for debugging but not for release publishing
test_accep_vexpress_qemu_flash:
  only:
    variables:
      - $BUILD_VEXPRESS_QEMU_FLASH == "true"
      - $TEST_VEXPRESS_QEMU_FLASH == "true"
  stage: test
  dependencies:
    - init_workspace
  <<: *build_and_test_acceptance
  variables:
    JOB_BASE_NAME: mender_vexpress_qemu_flash
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_VEXPRESS_QEMU_FLASH" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_vexpress_qemu_flash.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_vexpress_qemu_flash.html;
      fi
    - mkdir -p stage-artifacts
    - cp $WORKSPACE/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.ubifs stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_vexpress_qemu_flash.xml
      - report_accep_vexpress_qemu_flash.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_vexpress_qemu_flash.xml

test_accep_beagleboneblack:
  only:
    variables:
      - $BUILD_BEAGLEBONEBLACK == "true"
      - $TEST_BEAGLEBONEBLACK == "true"
  stage: test
  dependencies:
    - init_workspace
  <<: *build_and_test_acceptance
  variables:
    JOB_BASE_NAME: mender_beagleboneblack
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_BEAGLEBONEBLACK" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_beagleboneblack.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_beagleboneblack.html;
      fi
    - mkdir -p stage-artifacts
    - cp $WORKSPACE/beagleboneblack/beagleboneblack_release_1_*.mender stage-artifacts/
    - cp $WORKSPACE/beagleboneblack/mender-beagleboneblack_*.sdimg.gz stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_beagleboneblack.xml
      - report_accep_beagleboneblack.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_beagleboneblack.xml

test_accep_raspberrypi3:
  only:
    variables:
      - $BUILD_RASPBERRYPI3 == "true"
      - $TEST_RASPBERRYPI3 == "true"
  stage: test
  dependencies:
    - init_workspace
  <<: *build_and_test_acceptance
  variables:
    JOB_BASE_NAME: mender_raspberrypi3
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_RASPBERRYPI3" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_raspberrypi3.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_raspberrypi3.html;
      fi
    - mkdir -p stage-artifacts
    - cp $WORKSPACE/raspberrypi3/raspberrypi3_release_1_*.mender stage-artifacts/
    - cp $WORKSPACE/raspberrypi3/mender-raspberrypi3_*.sdimg.gz stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_raspberrypi3.xml
      - report_accep_raspberrypi3.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_raspberrypi3.xml

test_accep_raspberrypi4:
  only:
    variables:
      - $BUILD_RASPBERRYPI4 == "true"
      - $TEST_RASPBERRYPI4 == "true"
  stage: test
  dependencies:
    - init_workspace
  <<: *build_and_test_acceptance
  variables:
    JOB_BASE_NAME: mender_raspberrypi4
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_RASPBERRYPI4" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_raspberrypi4.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_raspberrypi4.html;
      fi
    - mkdir -p stage-artifacts
    - cp $WORKSPACE/raspberrypi4/raspberrypi4_release_1_*.mender stage-artifacts/
    - cp $WORKSPACE/raspberrypi4/mender-raspberrypi4_*.sdimg.gz stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_raspberrypi4.xml
      - report_accep_raspberrypi4.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_raspberrypi4.xml

test_backend_integration:
  only:
    variables:
      - $RUN_INTEGRATION_TESTS == "true"
  stage: test
  image: docker:18-dind
  tags:
    - mender-qa-slave-highcpu
  dependencies:
    - init_workspace
    - build_servers
    - build_mender-artifact
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt

    - /usr/local/bin/dockerd-entrypoint.sh &
    - sleep 10
    - export DOCKER_HOST="unix:///var/run/docker.sock"
    - docker version
    - apk --update add bash git py-pip gcc make python2-dev
      libc-dev libffi-dev openssl-dev python3 curl jq
    - pip install docker-compose==1.24.0
    - pip3 install pyyaml
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env /tmp/stage-artifacts .

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

    # Load all docker images except client
    - for repo in `integration/extra/release_tool.py -l docker`; do
        if ! echo $repo | grep -q mender-client-qemu; then
          docker load -i stage-artifacts/${repo}.tar;
        fi;
      done
    # Login for private repos
    - docker login -u menderbuildsystem -p ${DOCKER_HUB_PASSWORD}
    - docker login -u ntadm_menderci -p ${REGISTRY_MENDER_IO_PASSWORD} registry.mender.io
    # Set testing versions to PR
    - for repo in `integration/extra/release_tool.py -l docker`; do
        integration/extra/release_tool.py --set-version-of $repo --version pr;
      done
    # mender-artifact
    - mkdir -p integration/backend-tests/downloaded-tools
    - mv stage-artifacts/mender-artifact-linux integration/backend-tests/downloaded-tools/mender-artifact
    # copy for pre 2.4.x releases
    - cp integration/backend-tests/downloaded-tools/mender-artifact integration/backend-tests/mender-artifact
    # sysstat monitoring suite for Alpine Linux
    # collect cpu, load avg, memory and io usage every 2 secs forever
    # use 'sar' from sysstat to render the result file manually
    - apk add sysstat
    - ln -s /var/log/sa/ /var/log/sysstat
    - sar -P ALL 2 -o /var/log/sysstat/sysstat.log -uqrbS >/dev/null 2>&1 &
  script:
    # Traps only work if executed in a sub shell.
    - "("

    - function handle_exit() {
      ${CI_PROJECT_DIR}/scripts/maybe-wait-in-stage.sh WAIT_IN_STAGE_TEST ${CI_PROJECT_DIR}/WAIT_IN_STAGE_TEST;
      };
      trap handle_exit EXIT

    - INTEGRATION_TEST_SUITE=$(integration/extra/release_tool.py --select-test-suite || echo "all")
    - echo Running backend-tests suite $INTEGRATION_TEST_SUITE
    - cd integration/backend-tests/

    # From 2.4.x on, the script would download the requirements by default
    - if ./run --help | grep -e --no-download; then
        RUN_ARGS="--no-download";
      fi

    # for pre 2.2.x releases, ignore test suite selection and just run open tests
    - if ./run --help | grep -e --suite; then
        ./run --suite $INTEGRATION_TEST_SUITE $RUN_ARGS;
      else
        PYTEST_ARGS="-k 'not Multitenant'" ./run;
      fi

    # Always keep this at the end of the script stage
    - echo "success" > /JOB_RESULT.txt

    - ")"

  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - find ${CI_PROJECT_DIR}/../integration/backend-tests -mindepth 1 -maxdepth 1 -name 'acceptance.*' -exec cp "{}" . \;
    - ls ${CI_PROJECT_DIR}/../integration/backend-tests/results_*xml | xargs -n 1 -i cp {} .
    - ls ${CI_PROJECT_DIR}/../integration/backend-tests/report_*html | xargs -n 1 -i cp {} .
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - acceptance.*
      - results_backend_integration_*.xml
      - report_backend_integration_*.html
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_backend_integration_*.xml

test_full_integration:
  only:
    variables:
      - $RUN_INTEGRATION_TESTS == "true"
  stage: test
  image: docker:18-dind
  tags:
    - mender-qa-slave-highmem
  dependencies:
    - init_workspace
    - build_servers
    - build_client
    - build_mender-artifact
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt

    - /usr/local/bin/dockerd-entrypoint.sh &
    - sleep 10
    - export DOCKER_HOST="unix:///var/run/docker.sock"
    - docker version

    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env /tmp/stage-artifacts .

    # Post job status
    - apk --update add curl jq
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

    # Get and install the integration test requirements
    - apk add $(cat ${WORKSPACE}/integration/tests/requirements/apk-requirements.txt)
    - pip install  -r ${WORKSPACE}/integration/tests/requirements/python-requirements.txt
    - pip3 install -r ${WORKSPACE}/integration/tests/requirements/python-requirements.txt

    # Load all docker images
    - for repo in `integration/extra/release_tool.py -l docker`; do
        docker load -i stage-artifacts/${repo}.tar;
      done
    # Login for private repos
    - docker login -u menderbuildsystem -p ${DOCKER_HUB_PASSWORD}
    - docker login -u ntadm_menderci -p ${REGISTRY_MENDER_IO_PASSWORD} registry.mender.io
    # Set testing versions to PR
    - for repo in `integration/extra/release_tool.py -l docker`; do
        integration/extra/release_tool.py --set-version-of $repo --version pr;
      done
    # Other dependencies
    - install stage-artifacts/mender-artifact-linux /usr/local/bin/mender-artifact
    - make -C ${WORKSPACE}/go/src/github.com/mendersoftware/mender install-modules-gen
    # sysstat monitoring suite for Alpine Linux
    # collect cpu, load avg, memory and io usage every 2 secs forever
    # use 'sar' from sysstat to render the result file manually
    - apk add sysstat
    - ln -s /var/log/sa/ /var/log/sysstat
    - sar -P ALL 2 -o /var/log/sysstat/sysstat.log -uqrbS >/dev/null 2>&1 &
  script:
    # Traps only work if executed in a sub shell.
    - "("

    - function handle_exit() {
      ${CI_PROJECT_DIR}/scripts/maybe-wait-in-stage.sh WAIT_IN_STAGE_TEST ${CI_PROJECT_DIR}/WAIT_IN_STAGE_TEST;
      };
      trap handle_exit EXIT

    - export INTEGRATION_TEST_SUITE=$(integration/extra/release_tool.py --select-test-suite || echo "all")
    - echo Running integration tests suite $INTEGRATION_TEST_SUITE
    # only do automatic test suite selection if the user wasn't specific
    # run.sh will pick up the SPECIFIC_INTEGRATION_TEST var
    - if [ -z "$SPECIFIC_INTEGRATION_TEST" ]; then
        case $INTEGRATION_TEST_SUITE in
          "enterprise")
            export SPECIFIC_INTEGRATION_TEST="Enterprise";;
          "open")
            export SPECIFIC_INTEGRATION_TEST="not Enterprise";;
        esac
      fi
    - source ${CI_PROJECT_DIR}/build_revisions.env
    - cd integration/tests
    - ./run.sh --no-download --machine-name qemux86-64

    # Always keep this at the end of the script stage
    - echo "success" > /JOB_RESULT.txt

    - ")"

  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - cp -r ${CI_PROJECT_DIR}/../integration/tests/mender_test_logs .
    - cp ${CI_PROJECT_DIR}/../integration/tests/results.xml results_full_integration.xml
    - cp ${CI_PROJECT_DIR}/../integration/tests/report.html report_full_integration.html
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - mender_test_logs
      - results_full_integration.xml
      - report_full_integration.html
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_full_integration.xml

# Publish acceptance test coverage into codecov when either running tests for a
# mender PR (MENDER_REV != "master") or new merge into mender/master that requires
# Docker images publishing (PUBLISH_DOCKER_CLIENT_IMAGES == "true")
.template_publish_acceptance_coverage:
  only:
    variables:
      - $PUBLISH_DOCKER_CLIENT_IMAGES == "true"
      - $MENDER_REV != "master"
  stage: publish
  image: alpine
  dependencies:
    - init_workspace
  before_script:
    - apk --update add bash curl findutils git
    - tar xf ${CI_PROJECT_DIR}/workspace.tar.gz ./go/src/github.com/mendersoftware/mender
    - mv go/src/github.com/mendersoftware/mender ${CI_PROJECT_DIR}/mender
  script:
    - if [ ! -d ${CI_PROJECT_DIR}/acceptance-tests-coverage ]; then
        echo "No acceptance-tests-coverage directory found. Skipping the upload";
        exit 0;
      fi
    # Blank GITLAB_CI to force codecov to inspect the git repo instead of rely on GitLab env variblaes
    # see source at https://github.com/codecov/codecov-bash/blob/master/codecov
    - export GITLAB_CI=""
    - cd ${CI_PROJECT_DIR}/mender
    - bash -c "bash <(curl -s https://codecov.io/bash) -Z -t ${MENDER_CODECOV_TOKEN} -F acceptance,${JOB_BASE_NAME} -s ${CI_PROJECT_DIR}/acceptance-tests-coverage"

publish_accep_qemux86_64_uefi_grub:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_QEMUX86_64_UEFI_GRUB != "true"
  dependencies:
    - init_workspace
    - test_accep_qemux86_64_uefi_grub
  variables:
    JOB_BASE_NAME: qemux86_64_uefi_grub

publish_accep_vexpress_qemu:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_VEXPRESS_QEMU != "true"
  dependencies:
    - init_workspace
    - test_accep_vexpress_qemu
  variables:
    JOB_BASE_NAME: vexpress_qemu

publish_accep_qemux86_64_bios_grub:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_QEMUX86_64_BIOS_GRUB != "true"
  dependencies:
    - init_workspace
    - test_accep_qemux86_64_bios_grub
  variables:
    JOB_BASE_NAME: qemux86_64_bios_grub

publish_accep_qemux86_64_bios_grub_gpt:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_QEMUX86_64_BIOS_GRUB_GPT != "true"
  dependencies:
    - init_workspace
    - test_accep_qemux86_64_bios_grub_gpt
  variables:
    JOB_BASE_NAME: qemux86_64_bios_grub_gpt

publish_accep_vexpress_qemu_uboot_uefi_grub:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_VEXPRESS_QEMU_UBOOT_UEFI_GRUB != "true"
  dependencies:
    - init_workspace
    - test_accep_vexpress_qemu_uboot_uefi_grub
  variables:
    JOB_BASE_NAME: vexpress_qemu_uboot_uefi_grub

publish_accep_vexpress_qemu_flash:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_VEXPRESS_QEMU_FLASH != "true"
  dependencies:
    - init_workspace
    - test_accep_vexpress_qemu_flash
  variables:
    JOB_BASE_NAME: vexpress_qemu_flash

publish_accep_beagleboneblack:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_BEAGLEBONEBLACK != "true"
  dependencies:
    - init_workspace
    - test_accep_beagleboneblack
  variables:
    JOB_BASE_NAME: beagleboneblack

publish_accep_raspberrypi3:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_RASPBERRYPI3 != "true"
  dependencies:
    - init_workspace
    - test_accep_raspberrypi3
  variables:
    JOB_BASE_NAME: raspberrypi3

publish_accep_raspberrypi4:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_RASPBERRYPI4 != "true"
  dependencies:
    - init_workspace
    - test_accep_raspberrypi4
  variables:
    JOB_BASE_NAME: raspberrypi4

# This job allows mender repo to publish the related Docker client images on
# merges to master or release branches.
# Do not confuse with release_docker_images which publishes all images
# (including client ones) used during releases.
publish_docker_client_images:
  only:
    variables:
      - $PUBLISH_DOCKER_CLIENT_IMAGES == "true"
  stage: release
  image: docker
  services:
    - docker:19.03.5-dind
  dependencies:
    - init_workspace
    - build_servers
    - build_client
  before_script:
    # Check correct dind setup
    - docker version
    # Install dependencies
    - apk --update add git python3 py3-pip
    - pip3 install --upgrade pyyaml
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env /tmp/stage-artifacts .
    # Login for private repos
    - docker login -u menderbuildsystem -p ${DOCKER_HUB_PASSWORD}
  script:
    # for pre 2.4.x releases, ignore test suite selection and just run open tests
    - if $WORKSPACE/integration/extra/release_tool.py --help | grep -e --version-type; then
    -   VERSION_TYPE_PARAMS="--version-type docker"
    - fi
    # Load, tag and push mender-client-docker, mender-client-qemu, mender-client-qemu-rofs
    - for image in $($WORKSPACE/integration/extra/release_tool.py --list docker | grep mender-client); do
        version=$($WORKSPACE/integration/extra/release_tool.py --version-of $image $VERSION_TYPE_PARAMS --in-integration-version HEAD);
        docker_url=$($WORKSPACE/integration/extra/release_tool.py --map-name docker $image docker_url);
        docker load -i stage-artifacts/${image}.tar;
        docker tag $docker_url:pr $docker_url:${version};
        docker push $docker_url:${version};
      done

release_docker_images:
  when: manual
  stage: release
  image: docker
  services:
    - docker:19.03.5-dind
  dependencies:
    - init_workspace
    - build_servers
    - build_client
  before_script:
    # Check correct dind setup
    - docker version
    # Install dependencies
    - apk --update add git python3 py3-pip
    - pip3 install --upgrade pyyaml
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env /tmp/stage-artifacts .
    # Login for private repos
    - docker login -u menderbuildsystem -p ${DOCKER_HUB_PASSWORD}
    - docker login -u ntadm_menderci -p ${REGISTRY_MENDER_IO_PASSWORD} registry.mender.io
  script:
    # for pre 2.4.x releases, ignore test suite selection and just run open tests
    - if $WORKSPACE/integration/extra/release_tool.py --help | grep -e --version-type; then
    -   VERSION_TYPE_PARAMS="--version-type docker"
    - fi
    # Load, tag and push Docker images
    - for image in $($WORKSPACE/integration/extra/release_tool.py --list docker); do
        version=$($WORKSPACE/integration/extra/release_tool.py --version-of $image $VERSION_TYPE_PARAMS --in-integration-version HEAD);
        docker_url=$($WORKSPACE/integration/extra/release_tool.py --map-name docker $image docker_url);
        docker load -i stage-artifacts/${image}.tar;
        docker tag $docker_url:pr $docker_url:${version};
        docker push $docker_url:${version};
      done

release_board_artifacts:
  when: manual
  stage: release
  image: debian:buster
  dependencies:
    - init_workspace
    - test_accep_qemux86_64_uefi_grub
    - test_accep_vexpress_qemu
    - test_accep_qemux86_64_bios_grub
    - test_accep_qemux86_64_bios_grub_gpt
    - test_accep_vexpress_qemu_uboot_uefi_grub
    - test_accep_vexpress_qemu_flash
    - test_accep_beagleboneblack
    - test_accep_raspberrypi3
    - test_accep_raspberrypi4
  before_script:
    # Install dependencies
    - apt update && apt install -yyq awscli git python3 python3-pip
    - pip3 install --upgrade pyyaml
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env /tmp/stage-artifacts .
  script:
    # Publish boards artifacts and sdimg (when hw). Note that vexpress-qemu-flash is ignored
    - client_version=$($WORKSPACE/integration/extra/release_tool.py --version-of mender --in-integration-version HEAD)
    - for board_name in qemux86-64-uefi-grub vexpress-qemu qemux86-64-bios-grub-gpt qemux86-64-bios-grub
      vexpress-qemu-uboot-uefi-grub beagleboneblack raspberrypi3 raspberrypi4; do
        aws s3 cp stage-artifacts/${board_name}_release_1_${client_version}.mender
          s3://mender/${client_version}/${board_name}/${board_name}_release_1_${client_version}.mender;
        aws s3api put-object-acl --acl public-read --bucket mender
          --key ${client_version}/${board_name}/${board_name}_release_1_${client_version}.mender;
        if ! echo $board_name | grep -q qemu; then
          aws s3 cp stage-artifacts/mender-${board_name}_${client_version}.sdimg.gz
            s3://mender/${client_version}/${board_name}/mender-${board_name}_${client_version}.sdimg.gz;
          aws s3api put-object-acl --acl public-read --bucket mender
            --key ${client_version}/${board_name}/mender-${board_name}_${client_version}.sdimg.gz;
        fi;
      done

build_mender-cli:
  stage: build
  only:
    variables:
      - $BUILD_SERVERS == "true"
      - $RUN_INTEGRATION_TESTS == "true"
  image: golang:1.11.4
  dependencies:
    - init_workspace
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt

    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env .
    # Export GOPATH
    - export GOPATH="$WORKSPACE/go"

    - apt-get update -q
    - apt-get install -qqy jq

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

    # cd into component path
    - cd ${WORKSPACE}/go/src/github.com/mendersoftware/mender-cli
  script:
    - if grep -q build-multiplatform Makefile; then
        make build-multiplatform;
      else
        make build;
      fi
    - mkdir -p $CI_PROJECT_DIR/stage-artifacts
    - cp mender-cli* $CI_PROJECT_DIR/stage-artifacts

    # Always keep this at the end of the script stage
    - echo "success" > /JOB_RESULT.txt

  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    paths:
      - stage-artifacts/

build_mender-artifact:
  stage: build
  only:
    variables:
      - $BUILD_CLIENT == "true"
      - $RUN_INTEGRATION_TESTS == "true"
  image: docker
  services:
    - docker:dind
  tags:
    - docker
  dependencies:
    - init_workspace
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt

    # Check correct dind setup
    - docker version
    # Install dependencies
    - apk --update add bash curl git make jq
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env .

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

    # cd into component path
    - cd ${WORKSPACE}/go/src/github.com/mendersoftware/mender-artifact
  script:
    - make build-natives-contained
    - mkdir -p $CI_PROJECT_DIR/stage-artifacts
    - cp mender-artifact-* $CI_PROJECT_DIR/stage-artifacts

    # Always keep this at the end of the script stage
    - echo "success" > /JOB_RESULT.txt

  after_script:
    # Post job status
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    paths:
      - stage-artifacts/

release_binary_tools:
  when: manual
  stage: release
  image: debian:buster
  dependencies:
    - init_workspace
    - build_mender-cli
    - build_mender-artifact
  before_script:
    # Install dependencies
    - apt update && apt install -yyq awscli git python3 python3-pip
    - pip3 install --upgrade pyyaml
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env /tmp/stage-artifacts .
  script:
    # mender-cli
    - mender_cli_version=$($WORKSPACE/integration/extra/release_tool.py --version-of mender-cli --in-integration-version HEAD)
    - echo "=== mender-cli $mender_cli_version ==="
    # We can simplify once mender-cli 1.2.0 is not supported
    - if grep -q build-multiplatform $WORKSPACE/go/src/github.com/mendersoftware/mender-cli/Makefile; then
        echo "Publishing ${mender_cli_version} version for linux to S3";
        aws s3 cp stage-artifacts/mender-cli.linux.amd64
          s3://mender/mender-cli/${mender_cli_version}/linux/mender-cli;
        aws s3api put-object-acl --acl public-read --bucket mender
          --key mender-cli/${mender_cli_version}/linux/mender-cli;
        echo "Publishing ${mender_cli_version} version for darwin to S3";
        aws s3 cp stage-artifacts/mender-cli.darwin.amd64
          s3://mender/mender-cli/${mender_cli_version}/darwin/mender-cli;
        aws s3api put-object-acl --acl public-read --bucket mender
          --key mender-cli/${mender_cli_version}/darwin/mender-cli;
      else
        aws s3 cp stage-artifacts/mender-cli
          s3://mender/mender-cli/${mender_cli_version}/mender-cli;
        aws s3api put-object-acl --acl public-read --bucket mender
          --key mender-cli/${mender_cli_version}/mender-cli;
      fi
    # mender-artifact
    - mender_artifact_version=$($WORKSPACE/integration/extra/release_tool.py --version-of mender-artifact --in-integration-version HEAD)
    - echo "=== mender-artifact $mender_artifact_version ==="
    - for bin in mender-artifact-darwin mender-artifact-linux mender-artifact-windows.exe; do
        platform=${bin#mender-artifact-};
        platform=${platform%.*};
        echo "Publishing ${mender_artifact_version} version for ${platform} to S3";
        aws s3 cp stage-artifacts/${bin}
          s3://mender/mender-artifact/${mender_artifact_version}/${platform}/mender-artifact;
        aws s3api put-object-acl --acl public-read --bucket mender
          --key mender-artifact/${mender_artifact_version}/${platform}/mender-artifact;
      done

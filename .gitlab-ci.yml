
variables:
  # Versions
  MENDER_REV: "master"
  META_MENDER_REV: "master"
  POKY_REV: "dunfell"
  MENDER_QA_REV: "master"
  MENDER_ARTIFACT_REV: "master"
  MENDER_CONDUCTOR_REV: "master"
  MENDER_CONDUCTOR_ENTERPRISE_REV: "master"
  DEPLOYMENTS_REV: "master"
  DEPLOYMENTS_ENTERPRISE_REV: "master"
  DEVICEAUTH_REV: "master"
  GUI_REV: "master"
  INVENTORY_REV: "master"
  INVENTORY_ENTERPRISE_REV: "master"
  USERADM_REV: "master"
  USERADM_ENTERPRISE_REV: "master"
  MENDER_API_GATEWAY_DOCKER_REV: "master"
  MENDER_CLI_REV: "master"
  INTEGRATION_REV: "master"
  TENANTADM_REV: "master"
  WORKFLOWS_REV: "master"
  WORKFLOWS_ENTERPRISE_REV: "master"
  CREATE_ARTIFACT_WORKER_REV: "master"
  MENDER_STRESS_TEST_CLIENT_REV: "master"
  META_OPENEMBEDDED_REV: "dunfell"
  META_RASPBERRYPI_REV: "dunfell"
  AUDITLOGS_REV: "master"
  MTLS_AMBASSADOR_REV: "master"

  # Build stage
  BUILD_CLIENT: "true"
  BUILD_SERVERS: "true"

  # Client test stage
  BUILD_QEMUX86_64_UEFI_GRUB: "true"
  TEST_QEMUX86_64_UEFI_GRUB: "true"
  BUILD_QEMUX86_64_BIOS_GRUB: "true"
  TEST_QEMUX86_64_BIOS_GRUB: "true"
  BUILD_QEMUX86_64_BIOS_GRUB_GPT: "true"
  TEST_QEMUX86_64_BIOS_GRUB_GPT: "true"
  BUILD_VEXPRESS_QEMU_UBOOT_UEFI_GRUB: "true"
  TEST_VEXPRESS_QEMU_UBOOT_UEFI_GRUB: "true"
  BUILD_VEXPRESS_QEMU: "true"
  TEST_VEXPRESS_QEMU: "true"
  BUILD_VEXPRESS_QEMU_FLASH: "true"
  TEST_VEXPRESS_QEMU_FLASH: "true"
  BUILD_BEAGLEBONEBLACK: "true"
  TEST_BEAGLEBONEBLACK: "false"
  BUILD_RASPBERRYPI3: "false"
  TEST_RASPBERRYPI3: "false"
  BUILD_RASPBERRYPI4: "false"
  TEST_RASPBERRYPI4: "false"

  # Integration and backend integration tests
  RUN_INTEGRATION_TESTS: "true"
  SPECIFIC_INTEGRATION_TEST: ""
  TESTS_IN_PARALLEL: "4"

  # Publication
  PUBLISH_DOCKER_CLIENT_IMAGES: "false"
  PUBLISH_RELEASE_AUTOMATIC: "false"

  # Debugging options
  WAIT_IN_STAGE_INIT: ""
  WAIT_IN_STAGE_BUILD: ""
  WAIT_IN_STAGE_TEST: ""

  # Maintenance
  CLEAN_BUILD_CACHE: ""

  # Internal address for nfs sstate cache server (northamerica-northeast1-b)
  SSTATE_CACHE_INTRNL_ADDR: 10.162.0.2

  # Global environment variables (not meant to be changed)
  DEBIAN_FRONTEND: noninteractive

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits-signoffs.yml'
  - local: './gitlab-templates/stage/init.yml'
  - local: './gitlab-templates/stage/build.yml'
  - local: './gitlab-templates/stage/test.yml'
  - local: './gitlab-templates/stage/publish.yml'
  - local: './gitlab-templates/stage/release.yml'

stages:
  # .pre and .post have no effect and are only for documentation purposes. .pre
  # and .post stages run at the very start and very end of a pipeline,
  # regardless of where they are defined.
  - .pre
  - init
  - build
  - test
  - publish
  - release
  - .post

mender-qa:start:
  stage: .pre
  # Keep overhead low by using a small image with curl preinstalled.
  image: appropriate/curl
  before_script:
    - apk --update add jq
  script:
    - $CI_PROJECT_DIR/scripts/github_pull_request_status pending "mender-qa pipeline running" $CI_PIPELINE_URL ci/mender-qa

mender-qa:success:
  stage: .post
  when: on_success
  # Keep overhead low by using a small image with curl preinstalled.
  image: appropriate/curl
  before_script:
    - apk --update add jq
  script:
    - $CI_PROJECT_DIR/scripts/github_pull_request_status success "mender-qa pipeline passed" $CI_PIPELINE_URL ci/mender-qa

mender-qa:failure:
  stage: .post
  when: on_failure
  # Keep overhead low by using a small image with curl preinstalled.
  image: appropriate/curl
  before_script:
    - apk --update add jq
  script:
    - $CI_PROJECT_DIR/scripts/github_pull_request_status failure "mender-qa pipeline failed" $CI_PIPELINE_URL ci/mender-qa

.template_build_test_acc: &build_and_test_acceptance
  image: teracy/ubuntu:18.04-dind-18.09.9
  services:
  - docker:18-dind
  tags:
    - mender-qa-slave-highcpu
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt
    # Check correct dind setup
    - docker version
    # Export required yoctobuild script variables
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - export GOPATH="$WORKSPACE/go"
    # This template is used in both build and acc test stages,
    # for build stage, force default configuration QEMUX86_64_UEFI_GRUB
    - test -n "$ONLY_BUILD" && export BUILD_QEMUX86_64_UEFI_GRUB=true
    - test -n "$ONLY_BUILD" && export TEST_QEMUX86_64_UEFI_GRUB=false
    - export RUN_INTEGRATION_TESTS=false
    # basic tools
    - apt-get update -q
    - apt-get install -qqy
      git wget gnupg2 pass autoconf automake build-essential diffstat gawk chrpath
      libsdl1.2-dev e2tools nfs-client s3cmd psmisc screen libssl-dev python-dev bash
      libxml2-dev libxslt-dev libffi-dev nodejs libyaml-dev sysbench texinfo pkg-config
      zlib1g-dev libaio-dev libbluetooth-dev libbrlapi-dev libbz2-dev libglib2.0-dev
      libfdt-dev libpixman-1-dev zlib1g-dev jq liblzo2-dev device-tree-compiler
      qemu-system-x86 qemu-system-arm bc kpartx liblzma-dev cpio sudo awscli gdisk
    # Prepare mender user
    - useradd -m -u 1010 mender || true
    - mkdir -p /home/mender/.ssh
    - echo "mender ALL=(ALL:ALL) NOPASSWD:ALL" >> /etc/sudoers
    - sed -i -e 's/^\( *Defaults *requiretty *\)$/# \1/' /etc/sudoers
    - chown -R mender:mender /home/mender
    - chown -R mender:mender ${WORKSPACE}
    - usermod -a -G docker mender
    # docker-compose from upstream
    - curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    # golang from upstream
    - wget -q https://storage.googleapis.com/golang/go1.12.linux-amd64.tar.gz
    - gunzip -c go1.12.linux-amd64.tar.gz | (cd /usr/local && tar x)
    - ln -sf /usr/local/go/bin/go /usr/local/bin/go
    - ln -sf /usr/local/go/bin/godoc /usr/local/bin/godoc
    - ln -sf /usr/local/go/bin/gofmt /usr/local/bin/gofmt
    # Python 2 pip
    - apt-get install -qqy python-pip
    - pip install --upgrade pip
    - pip2 install requests --upgrade
    - pip2 install pytest --upgrade
    - pip2 install filelock --upgrade
    - pip2 install pytest-xdist --upgrade
    - pip2 install pytest-html --upgrade
    - pip2 install -I fabric==1.14.0
    - pip2 install psutil --upgrade
    - pip2 install boto3 --upgrade
    - pip2 install pycrypto --upgrade
    # Python 3 pip
    - apt-get install -qqy python3-pip
    - pip3 install --upgrade pyyaml
    # Post job status
    - source ${CI_PROJECT_DIR}/build_revisions.env
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"
    # Locales
    - apt-get install locales
    - locale-gen --purge en_US.UTF-8
    - export LC_ALL=en_US.UTF-8
    - export LANG=en_US.UTF-8
    - export LANGUAGE=en_US.UTF-8
    # debugfs
    - cp /sbin/debugfs /usr/bin/ || echo "debugfs not in /sbin/"
    # sysstat monitoring suite for Debian/Ubuntu
    # collect cpu, load avg, memory and io usage every 2 secs forever
    # use 'sar' from sysstat to render the result file manually
    - apt-get install -qqy sysstat
    - sed -i 's/false/true/g' /etc/default/sysstat
    - service sysstat start
    - sar -P ALL 2 -o /var/log/sysstat/sysstat.log -uqrbS >/dev/null 2>&1 &
    # Setup KVM
    - usermod -a -G kvm mender
    - apt-get install -qqy kmod libvirt-bin qemu-utils qemu-kvm
    - apt-get install -qqy linux-modules-`uname -r`
    # Enable nesting VMs
    - modprobe -r kvm_intel
    - modprobe kvm_intel nested=Y
    # Enable NFS cache for yocto
    - apt-get install nfs-common
    - mkdir -p /mnt/sstate-cache
    - mount.nfs4 ${SSTATE_CACHE_INTRNL_ADDR}:/sstate-cache /mnt/sstate-cache
  script:
    # Traps only work if executed in a sub shell.
    - "("
    - mv workspace.tar.gz /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz

    - function handle_exit() {
      if test -n "$ONLY_BUILD"; then
      ${CI_PROJECT_DIR}/scripts/maybe-wait-in-stage.sh WAIT_IN_STAGE_BUILD ${CI_PROJECT_DIR}/WAIT_IN_STAGE_BUILD;
      else
      ${CI_PROJECT_DIR}/scripts/maybe-wait-in-stage.sh WAIT_IN_STAGE_TEST ${CI_PROJECT_DIR}/WAIT_IN_STAGE_TEST;
      fi;
      };
      trap handle_exit EXIT

    - source ${CI_PROJECT_DIR}/build_revisions.env
    - chown -R mender:mender ${WORKSPACE}
    - export HOME="/home/mender"
    - sudo -E -u mender ${WORKSPACE}/mender-qa/scripts/jenkins-yoctobuild-build.sh

    - if [ -d $WORKSPACE/meta-mender/tests/acceptance/coverage ]; then
        mkdir -p ${CI_PROJECT_DIR}/acceptance-tests-coverage;
        cp -r $WORKSPACE/meta-mender/tests/acceptance/coverage/* ${CI_PROJECT_DIR}/acceptance-tests-coverage;
      fi

    # Always keep this at the end of the script stage
    - echo "success" > /JOB_RESULT.txt

    - ")"


coveralls:finish-build:
  stage: .post
  # See https://docs.coveralls.io/parallel-build-webhook
  variables:
    COVERALLS_WEBHOOK_URL: "https://coveralls.io/webhook"
  image: appropriate/curl
  dependencies:
    - init_workspace
  before_script:
    - apk add --no-cache git
    # Get mender source
    - tar xf ${CI_PROJECT_DIR}/workspace.tar.gz ./go/src/github.com/mendersoftware/mender
    - mv go/src/github.com/mendersoftware/mender ${CI_PROJECT_DIR}/mender
    - cd ${CI_PROJECT_DIR}/mender
  script:
    - 'curl -k ${COVERALLS_WEBHOOK_URL}?repo_token=${MENDER_COVERALLS_TOKEN} -d "payload[build_num]=$(git rev-parse HEAD)&payload[status]=done"'

publish_accep_qemux86_64_uefi_grub:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_QEMUX86_64_UEFI_GRUB != "true"
  dependencies:
    - init_workspace
    - test_accep_qemux86_64_uefi_grub
  variables:
    JOB_BASE_NAME: qemux86_64_uefi_grub

publish_accep_vexpress_qemu:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_VEXPRESS_QEMU != "true"
  dependencies:
    - init_workspace
    - test_accep_vexpress_qemu
  variables:
    JOB_BASE_NAME: vexpress_qemu

publish_accep_qemux86_64_bios_grub:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_QEMUX86_64_BIOS_GRUB != "true"
  dependencies:
    - init_workspace
    - test_accep_qemux86_64_bios_grub
  variables:
    JOB_BASE_NAME: qemux86_64_bios_grub

publish_accep_qemux86_64_bios_grub_gpt:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_QEMUX86_64_BIOS_GRUB_GPT != "true"
  dependencies:
    - init_workspace
    - test_accep_qemux86_64_bios_grub_gpt
  variables:
    JOB_BASE_NAME: qemux86_64_bios_grub_gpt

publish_accep_vexpress_qemu_uboot_uefi_grub:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_VEXPRESS_QEMU_UBOOT_UEFI_GRUB != "true"
  dependencies:
    - init_workspace
    - test_accep_vexpress_qemu_uboot_uefi_grub
  variables:
    JOB_BASE_NAME: vexpress_qemu_uboot_uefi_grub

publish_accep_vexpress_qemu_flash:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_VEXPRESS_QEMU_FLASH != "true"
  dependencies:
    - init_workspace
    - test_accep_vexpress_qemu_flash
  variables:
    JOB_BASE_NAME: vexpress_qemu_flash

publish_accep_beagleboneblack:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_BEAGLEBONEBLACK != "true"
  dependencies:
    - init_workspace
    - test_accep_beagleboneblack
  variables:
    JOB_BASE_NAME: beagleboneblack

publish_accep_raspberrypi3:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_RASPBERRYPI3 != "true"
  dependencies:
    - init_workspace
    - test_accep_raspberrypi3
  variables:
    JOB_BASE_NAME: raspberrypi3

publish_accep_raspberrypi4:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_RASPBERRYPI4 != "true"
  dependencies:
    - init_workspace
    - test_accep_raspberrypi4
  variables:
    JOB_BASE_NAME: raspberrypi4


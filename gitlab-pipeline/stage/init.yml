
init:workspace:
  tags:
    - mender-qa-worker-generic-light
  stage: init
  image: alpine:3.12
  script:
    # Traps only work if executed in a sub shell.
    - "("

    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt

    - function handle_exit() {
      ${CI_PROJECT_DIR}/scripts/maybe-wait-in-stage.sh WAIT_IN_STAGE_INIT ${CI_PROJECT_DIR}/WAIT_IN_STAGE_INIT;
      };
      trap handle_exit EXIT

    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - apk --update add git openssh bash python3 curl py3-pip jq xz

    # release_tool.py dependencies
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip3 install -r requirements.txt

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

    # Prepare SSH keys
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts

    # Bash function to checkout repos
    # The last parameter is optional. When omitted, master is checked out. This allow building
    # old integration release branches which don't have all current repos in component-maps.yml
    - |
      function checkout_repo() {
        if [ $# -lt 2 ]; then
          echo "Usage: checkout_repo clone_url clone_path [clone_rev]"
          return 1
        fi

        clone_url=$1
        clone_path=$2
        clone_rev=${3:-master}

        repo_id=$(basename $clone_url .git | tr [a-z-] [A-Z_])

        git init $clone_path || return 1

        (
          cd $clone_path &&
          git remote add origin $clone_url &&
          git fetch -u -f origin ${clone_rev}:pr &&
          git checkout pr ||
          git checkout -f -b pr ${clone_rev}
        ) || return 1

        (
          cd $clone_path
          # This is a no-op for repositories that don't have submodules. The `--depth=1` needs
          # server support, and not all sources we clone submodules from support that, so let's try
          # first, to get as much space saving as we can, but fall back on full clone.
          git submodule update --init --recursive --depth=1 ||
          (
            git submodule deinit --all --force &&
            rm -rf .git/modules/* &&
            git submodule update --init --recursive
          )
        ) || return 1

        (
          cd $clone_path
          echo "${repo_id}_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env
        ) || return 1
      }

    # Get revision for a repository (i.e mender-something to $MENDER_SOMETHING_REV)
    - |
      function repo_to_rev() {
          echo "$(eval echo \$$(echo $1 | tr [a-z-] [A-Z_])_REV)"
      }

    # Clean WORKSPACE and clone poky in the root
    - find ${WORKSPACE}
      -mindepth 1
      -maxdepth 1
      -not -name $(basename ${CI_PROJECT_DIR})
      -exec rm -rf '{}' ';'
    - cd ${WORKSPACE}
    - git init . && git remote add origin https://github.com/mendersoftware/poky
    - git fetch && git checkout -f origin/${POKY_REV}
    - (
    -   echo "POKY_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env
    - )

    # Add MENDER_QA_REV, which is special, since it is this repository.
    - if echo "$CI_COMMIT_REF_NAME" | egrep '^pr_[0-9]+$'; then
        export MENDER_QA_REV="pull/$(echo "$CI_COMMIT_REF_NAME" | egrep -o '[0-9]+')/head";
      else
        export MENDER_QA_REV="$CI_COMMIT_REF_NAME";
      fi
    - (
    -   cd mender-qa
    -   echo "MENDER_QA_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env
    - )

    - checkout_repo https://github.com/mendersoftware/integration integration $INTEGRATION_REV

    # Fetch all branches for integration. This is needed during the publish
    # stage when we query versions using the release_tool. Other repositories
    # should not need it.
    - (
    -   cd integration
    #   Rename the branch we're on, so that it's not in the way for the
    #   subsequent fetch. It's ok if this fails, it just means we're not on any
    #   branch.
    -   git branch -m temp-branch || true
    #   Git trick: Fetch directly into our local branches instead of remote
    #   branches.
    -   git fetch -f origin 'refs/heads/*:refs/heads/*'
    #   Get last remaining tags, if any.
    -   git fetch --tags origin
    - )

    # Add Mender repositories.
    - for repo in $(integration/extra/release_tool.py --list); do
    -   checkout_repo
          git@github.com:mendersoftware/$repo
          go/src/github.com/mendersoftware/$repo
          $(repo_to_rev $repo)
    - done

    # Add other repositories.
    - checkout_repo https://github.com/mendersoftware/mender-stress-test-client go/src/github.com/mendersoftware/mender-stress-test-client $MENDER_STRESS_TEST_CLIENT_REV
    - checkout_repo git://git.openembedded.org/meta-openembedded.git meta-openembedded $META_OPENEMBEDDED_REV
    - if [ "$BUILD_RASPBERRYPI3" = true ] || [ "$BUILD_RASPBERRYPI4" = true ]; then
    -   checkout_repo https://github.com/agherzan/meta-raspberrypi.git meta-raspberrypi $META_RASPBERRYPI_REV
    - fi

    # For meta-mender we need the full git history for this logic to work:
    # https://github.com/mendersoftware/meta-mender/blob/dd0f848f260810e08b98d2a1915f734bf02a64b1/tests/acceptance/test_uboot_automation.py#L68-L83
    - git clone git@github.com:mendersoftware/meta-mender meta-mender
    - |
      (
        cd meta-mender &&
        git fetch -u -f origin $META_MENDER_REV:pr &&
        git checkout pr ||
        git checkout -f -b pr $META_MENDER_REV
        git submodule update --init
      ) || return 1
    - (
    -   cd meta-mender
    -   echo "META_MENDER_REV_GIT_SHA=$(git rev-parse HEAD)" >> ${CI_PROJECT_DIR}/build_revisions.env
    - )

    # Print for debug purposes
    - cat ${CI_PROJECT_DIR}/build_revisions.env

    # Save artifact the rest of the pipeline
    - tar -cf /tmp/workspace.tar .
    - xz -${WORKSPACE_XZ_LEVEL:-1} ${WORKSPACE_XZ_ARGS} /tmp/workspace.tar
    - mv /tmp/workspace.tar.xz ${CI_PROJECT_DIR}/workspace.tar.xz

    # Always keep this at the end of the script stage
    - echo "success" > /JOB_RESULT.txt

    - ")"

  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    paths:
      - workspace.tar.xz
    reports:
      dotenv:
        - build_revisions.env

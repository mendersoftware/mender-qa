
include:
  - project: 'Northern.tech/Mender/mender-gateway'
    file: '.gitlab-ci-build-package.yml'
    ref: 'master'

build:client:docker:
  tags:
    - mender-qa-worker-generic-light
  stage: build
  only:
    variables:
      - $BUILD_CLIENT == "true"
  variables:
    DOCKER_BUILDKIT: 1
  needs:
    - init:workspace
  allow_failure: false
  image: docker
  services:
    - docker:dind
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt
    # Dependencies
    - apk --update add python3 py-pip curl jq bash git
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip3 install --break-system-packages -r requirements.txt
    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"
    # Prepare workspace
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
  script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login --username ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
    # First build mender's repo Docker image
    - docker_url=$($WORKSPACE/integration/extra/release_tool.py --map-name docker mender-client-docker docker_url)
    - cd go/src/github.com/mendersoftware/mender
    - ./tests/build-docker -t $docker_url:pr
    - docker tag ${docker_url}:pr ${GITLAB_REGISTRY_PREFIX}-mender-client-docker
    - docker push ${GITLAB_REGISTRY_PREFIX}-mender-client-docker
    # Then, if available, build integration's repo Docker image (Mender 2.7 and later)
    - if $($WORKSPACE/integration/extra/release_tool.py -l docker | egrep -q '^mender-client-docker-addons$'); then
    -   docker_url=$($WORKSPACE/integration/extra/release_tool.py --map-name docker mender-client-docker-addons docker_url)
    -   cd $WORKSPACE/integration/extra/mender-client-docker-addons
    -   docker build
        --build-arg MENDER_CLIENT_REV=$MENDER_REV
        --build-arg MENDER_CONNECT_REV=$MENDER_CONNECT_REV
        --build-arg MENDER_SETUP_REV=$MENDER_SETUP_REV
        --tag $docker_url:pr
        .
    -   docker tag ${docker_url}:pr ${GITLAB_REGISTRY_PREFIX}-mender-client-docker-addons
    -   docker push ${GITLAB_REGISTRY_PREFIX}-mender-client-docker-addons
    - fi
    - echo "success" > /JOB_RESULT.txt
  after_script:
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

build:mender-cli:
  tags:
    - mender-qa-worker-generic-light
  stage: build
  only:
    variables:
      - $RUN_BACKEND_INTEGRATION_TESTS == "true"
      - $RUN_INTEGRATION_TESTS == "true"
  image: golang:1.20-alpine3.18
  needs:
    - init:workspace
  allow_failure: false
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt

    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    # Export GOPATH
    - export GOPATH="$WORKSPACE/go"

    - apk --update add jq make curl git

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

    # cd into component path
    - cd ${WORKSPACE}/go/src/github.com/mendersoftware/mender-cli
  script:
    - if grep -q build-multiplatform Makefile; then
        make build-multiplatform;
      else
        make build;
      fi
    - mkdir -p $CI_PROJECT_DIR/stage-artifacts
    - cp mender-cli* $CI_PROJECT_DIR/stage-artifacts

    # Always keep this at the end of the script stage
    - echo "success" > /JOB_RESULT.txt

  after_script:
    - ls -lh stage-artifacts/
    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    paths:
      - stage-artifacts/

build:mender-artifact:
  tags:
    - mender-qa-worker-generic
  stage: build
  only:
    variables:
      - $BUILD_CLIENT == "true"
      - $RUN_BACKEND_INTEGRATION_TESTS == "true"
      - $RUN_INTEGRATION_TESTS == "true"
  variables:
    DOCKER_BUILDKIT: 1
  image: docker
  services:
    - docker:dind
  needs:
    - init:workspace
  allow_failure: false
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt

    # Check correct dind setup
    - docker version
    # Install dependencies
    - apk --update add bash curl git make jq
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

    # cd into component path
    - cd ${WORKSPACE}/go/src/github.com/mendersoftware/mender-artifact
  script:
    - make build-natives-contained
    - mkdir -p $CI_PROJECT_DIR/stage-artifacts
    - cp mender-artifact-* $CI_PROJECT_DIR/stage-artifacts

    # Always keep this at the end of the script stage
    - echo "success" > /JOB_RESULT.txt

  after_script:
    - ls -lh stage-artifacts/
    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    paths:
      - stage-artifacts/

build:mender-monitor:package:
  tags:
    - mender-qa-worker-generic-light
  stage: build
  image: alpine:3.12
  needs: []
  allow_failure: false
  before_script:
    - apk add --no-cache git openssh
    # Prepare SSH keys
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    # Clone monitor-client
    - git clone git@github.com:mendersoftware/monitor-client monitor-client
    - cd monitor-client
    - ( git fetch -u -f origin $MONITOR_CLIENT_REV:pr &&
          git checkout pr ||
          git checkout -f -b pr $MONITOR_CLIENT_REV
      ) || return 1
  script:
    - apk add --no-cache make git
    - git fetch --tags origin
    - make package
    - mkdir -p ${CI_PROJECT_DIR}/stage-artifacts
    - mv mender-monitor-*.tar.gz ${CI_PROJECT_DIR}/stage-artifacts
    - ls -lh ${CI_PROJECT_DIR}/stage-artifacts/
  artifacts:
    paths:
      - stage-artifacts

build:mender-gateway:docker:
  tags:
    - mender-qa-worker-generic-light
  variables:
    DOCKER_BUILDKIT: 1
  stage: build
  needs:
    - init:workspace
  allow_failure: false
  image: docker
  services:
    - docker:dind
  before_script:
    # Dependencies
    - apk --update --no-cache add bash git make python3 py-pip curl jq xz
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip3 install --break-system-packages -r requirements.txt
    # Prepare workspace
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
  script:
    - docker_url=$($WORKSPACE/integration/extra/release_tool.py --map-name docker mender-gateway docker_url)
    - cd ${WORKSPACE}/go/src/github.com/mendersoftware/mender-gateway
    - docker build -t $docker_url:pr .
    - $WORKSPACE/integration/extra/release_tool.py --set-version-of mender-gateway --version pr
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mkdir -p stage-artifacts
    - docker_url=$(${CI_PROJECT_DIR}/../integration/extra/release_tool.py --map-name docker mender-gateway docker_url)
    - docker save $docker_url:pr -o stage-artifacts/mender-gateway.tar
    - ls -lh stage-artifacts/

  artifacts:
    expire_in: 2w
    paths:
      - stage-artifacts/

build:mender-gateway:package:
  tags:
    - mender-qa-worker-generic-light
  stage: build
  needs:
    - init:workspace
  allow_failure: false
  before_script:
    # Early exit when building an integration version without mender-gateway
    - tar -tf workspace.tar.gz
        ./go/src/github.com/mendersoftware/mender-gateway  >/dev/null 2>/dev/null || exit 0
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    # Move into component path
    - cd ${WORKSPACE}/go/src/github.com/mendersoftware/mender-gateway

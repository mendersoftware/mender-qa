
build:client:qemu:
  only:
    variables:
      - $BUILD_CLIENT == "true"
  stage: build
  extends: .template_build_test_acc
  services:
    - docker:19.03-dind
  variables:
    JOB_BASE_NAME: mender_qemux86_64_uefi_grub
    ONLY_BUILD: "true"
    BUILD_DOCKER_IMAGES: "true"
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - mkdir -p stage-artifacts
    - docker save mendersoftware/mender-client-qemu:pr -o stage-artifacts/mender-client-qemu.tar
    - docker save mendersoftware/mender-client-qemu-rofs:pr -o stage-artifacts/mender-client-qemu-rofs.tar
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    paths:
      - stage-artifacts/
      - sysstat.log
      - sysstat.svg

build:client:docker:
  stage: build
  only:
    variables:
      - $BUILD_CLIENT == "true"
  needs:
    - init_workspace
  image: docker:19.03
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt
    # Dependencies
    - apk --update add python3 py-pip curl jq bash
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip3 install -r requirements.txt
    # Post job status
    - source ${CI_PROJECT_DIR}/build_revisions.env
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"
    # Prepare workspace
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
  script:
    - mkdir -p ${CI_PROJECT_DIR}/stage-artifacts
    # First build mender's repo Docker image
    - docker_url=$($WORKSPACE/integration/extra/release_tool.py --map-name docker mender-client-docker docker_url)
    - cd go/src/github.com/mendersoftware/mender
    - ./tests/build-docker -t $docker_url:pr
    - docker save $docker_url:pr -o ${CI_PROJECT_DIR}/stage-artifacts/mender-client-docker.tar
    # Then, if available, build integration's repo Docker image (Mender 2.7 and later)
    - if $($WORKSPACE/integration/extra/release_tool.py -l docker | egrep -q '^mender-client-docker-addons$'); then
    -   docker_url=$($WORKSPACE/integration/extra/release_tool.py --map-name docker mender-client-docker-addons docker_url)
    -   cd $WORKSPACE/integration/extra/mender-client-docker-addons
    -   docker build
        --build-arg MENDER_CLIENT_REV=$MENDER_REV
        --build-arg MENDER_CONNECT_REV=$MENDER_CONNECT_REV
        --tag $docker_url:pr
        .
    -   mkdir -p ${CI_PROJECT_DIR}/stage-artifacts
    -   docker save $docker_url:pr -o ${CI_PROJECT_DIR}/stage-artifacts/mender-client-docker-addons.tar
    - fi
    - echo "success" > /JOB_RESULT.txt
  after_script:
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    paths:
      - stage-artifacts/

generate-server-build-trigger:
  image: python:alpine
  stage: build_prep
  before_script:
    - apk add --no-cache git curl bash
    - pip3 install pyyaml
    - git clone https://github.com/mendersoftware/integration.git integration
  script:
    - export WORKSPACE=$(pwd)
    - python scripts/generate_server_jobs.py --branch master # <- master here for testing, otherwise most-likely ${CI_COMMIT_REF_NAME}
  artifacts:
    paths:
      - gitlab-ci-server-build-jobs.yml

build:servers:
  stage: build
  trigger:
    include:
      - artifact: gitlab-ci-server-build-jobs.yml
        job: generate-server-build-trigger
    strategy: depend

build:mender-cli:
  stage: build
  only:
    variables:
      - $BUILD_SERVERS == "true"
      - $RUN_INTEGRATION_TESTS == "true"
  image: golang:1.15-alpine3.12
  needs:
    - init_workspace
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt

    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env .
    # Export GOPATH
    - export GOPATH="$WORKSPACE/go"

    - apk --update add jq make curl git

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

    # cd into component path
    - cd ${WORKSPACE}/go/src/github.com/mendersoftware/mender-cli
  script:
    - if grep -q build-multiplatform Makefile; then
        make build-multiplatform;
      else
        make build;
      fi
    - mkdir -p $CI_PROJECT_DIR/stage-artifacts
    - cp mender-cli* $CI_PROJECT_DIR/stage-artifacts

    # Always keep this at the end of the script stage
    - echo "success" > /JOB_RESULT.txt

  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    paths:
      - stage-artifacts/

build:mender-artifact:
  stage: build
  only:
    variables:
      - $BUILD_CLIENT == "true"
      - $RUN_INTEGRATION_TESTS == "true"
  image: docker:19.03
  services:
    - docker:dind
  tags:
    - docker
  needs:
    - init_workspace
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt

    # Check correct dind setup
    - docker version
    # Install dependencies
    - apk --update add bash curl git make jq
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env .

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

    # cd into component path
    - cd ${WORKSPACE}/go/src/github.com/mendersoftware/mender-artifact
  script:
    - make build-natives-contained
    - mkdir -p $CI_PROJECT_DIR/stage-artifacts
    - cp mender-artifact-* $CI_PROJECT_DIR/stage-artifacts

    # Always keep this at the end of the script stage
    - echo "success" > /JOB_RESULT.txt

  after_script:
    # Post job status
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    paths:
      - stage-artifacts/

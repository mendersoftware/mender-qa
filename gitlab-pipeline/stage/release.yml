
.template_release_docker_images:
  tags:
    - mender-qa-worker-generic-light
  only:
    variables:
      - ($BUILD_SERVERS == "true" && $BUILD_CLIENT == "true") || $RUN_INTEGRATION_TESTS == "true"
  stage: release
  image: docker:19.03
  services:
    - docker:dind
  dependencies:
    - init:workspace
    - build:servers
    - build:client:qemu
    - build:client:docker
  before_script:
    # Check correct dind setup
    - docker version
    # Install dependencies
    - apk --update add git python3 py3-pip xz
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip3 install -r requirements.txt
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.xz stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - xz -d /tmp/workspace.tar.xz
    - tar -xf /tmp/workspace.tar
    - mv /tmp/stage-artifacts .
    # Login for private repos
    - docker login -u menderbuildsystem -p ${DOCKER_HUB_PASSWORD}
    - docker login -u ntadm_menderci -p ${REGISTRY_MENDER_IO_PASSWORD} registry.mender.io
  script:
    # for pre 2.4.x releases, omit --version-type
    - if $WORKSPACE/integration/extra/release_tool.py --help | grep -e --version-type; then
    -   VERSION_TYPE_PARAMS="--version-type docker"
    - fi
    # Load, tag and push Docker images
    - for image in $($WORKSPACE/integration/extra/release_tool.py --list docker); do
        version=$($WORKSPACE/integration/extra/release_tool.py --version-of $image $VERSION_TYPE_PARAMS --in-integration-version $INTEGRATION_REV);
        docker_url=$($WORKSPACE/integration/extra/release_tool.py --map-name docker $image docker_url);
        docker load -i stage-artifacts/${image}.tar;
        docker tag $docker_url:pr $docker_url:${version};
        docker push $docker_url:${version};
      done


release_docker_images:manual:
  when: manual
  extends: .template_release_docker_images


release_docker_images:automatic:
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true"
  extends: .template_release_docker_images

.template_release_board_artifacts:
  tags:
    - mender-qa-worker-generic-light
  # Jobs including this template must define PUBLISH_BOARD_NAME and set up dependencies
  stage: release
  image: debian:buster
  before_script:
    # Install dependencies
    - apt update && apt install -yyq awscli git wget python3 python3-pip xz-utils
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip3 install -r requirements.txt
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.xz stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - xz -d /tmp/workspace.tar.xz
    - tar -xf /tmp/workspace.tar
    - mv /tmp/stage-artifacts .
  script:
    # Publish boards artifacts and sdimg (when not qemu board).
    - client_version=$($WORKSPACE/integration/extra/release_tool.py --version-of mender --in-integration-version $INTEGRATION_REV)
    - aws s3 cp stage-artifacts/${PUBLISH_BOARD_NAME}_release_1_${client_version}.mender
        s3://mender/${client_version}/${PUBLISH_BOARD_NAME}/${PUBLISH_BOARD_NAME}_release_1_${client_version}.mender
    - aws s3api put-object-acl --acl public-read --bucket mender
        --key ${client_version}/${PUBLISH_BOARD_NAME}/${PUBLISH_BOARD_NAME}_release_1_${client_version}.mender
    - if ! echo $PUBLISH_BOARD_NAME | grep -q qemu; then
    -   aws s3 cp stage-artifacts/mender-${PUBLISH_BOARD_NAME}_${client_version}.sdimg.gz
          s3://mender/${client_version}/${PUBLISH_BOARD_NAME}/mender-${PUBLISH_BOARD_NAME}_${client_version}.sdimg.gz;
    -   aws s3api put-object-acl --acl public-read --bucket mender
          --key ${client_version}/${PUBLISH_BOARD_NAME}/mender-${PUBLISH_BOARD_NAME}_${client_version}.sdimg.gz
    - fi

release_board_artifacts:qemux86-64-uefi-grub:manual:
  variables:
    PUBLISH_BOARD_NAME: qemux86-64-uefi-grub
  dependencies:
    - init:workspace
    - test:acceptance:qemux86_64:uefi_grub
  when: manual
  only:
    variables:
      - $BUILD_QEMUX86_64_UEFI_GRUB == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:qemux86-64-uefi-grub:automatic:
  variables:
    PUBLISH_BOARD_NAME: qemux86-64-uefi-grub
  dependencies:
    - init:workspace
    - test:acceptance:qemux86_64:uefi_grub
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true" && $BUILD_QEMUX86_64_UEFI_GRUB == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:vexpress-qemu:manual:
  variables:
    PUBLISH_BOARD_NAME: vexpress-qemu
  dependencies:
    - init:workspace
    - test:acceptance:vexpress_qemu
  when: manual
  only:
    variables:
      - $BUILD_VEXPRESS_QEMU == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:vexpress-qemu:automatic:
  variables:
    PUBLISH_BOARD_NAME: vexpress-qemu
  dependencies:
    - init:workspace
    - test:acceptance:vexpress_qemu
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true" && $BUILD_VEXPRESS_QEMU == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:qemux86-64-bios-grub-gpt:manual:
  variables:
    PUBLISH_BOARD_NAME: qemux86-64-bios-grub-gpt
  dependencies:
    - init:workspace
    - test:acceptance:qemux86_64:bios_grub_gpt
  when: manual
  only:
    variables:
      - $BUILD_QEMUX86_64_BIOS_GRUB_GPT == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:qemux86-64-bios-grub-gpt:automatic:
  variables:
    PUBLISH_BOARD_NAME: qemux86-64-bios-grub-gpt
  dependencies:
    - init:workspace
    - test:acceptance:qemux86_64:bios_grub_gpt
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true" && $BUILD_QEMUX86_64_BIOS_GRUB_GPT == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:qemux86-64-bios-grub:manual:
  variables:
    PUBLISH_BOARD_NAME: qemux86-64-bios-grub
  dependencies:
    - init:workspace
    - test:acceptance:qemux86_64:bios_grub
  when: manual
  only:
    variables:
      - $BUILD_QEMUX86_64_BIOS_GRUB == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:qemux86-64-bios-grub:automatic:
  variables:
    PUBLISH_BOARD_NAME: qemux86-64-bios-grub
  dependencies:
    - init:workspace
    - test:acceptance:qemux86_64:bios_grub
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true" && $BUILD_QEMUX86_64_BIOS_GRUB == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:vexpress-qemu-uboot-uefi-grub:manual:
  variables:
    PUBLISH_BOARD_NAME: vexpress-qemu-uboot-uefi-grub
  dependencies:
    - init:workspace
    - test:acceptance:vexpress_qemu:uboot_uefi_grub
  when: manual
  only:
    variables:
      - $BUILD_VEXPRESS_QEMU_UBOOT_UEFI_GRUB == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:vexpress-qemu-uboot-uefi-grub:automatic:
  variables:
    PUBLISH_BOARD_NAME: vexpress-qemu-uboot-uefi-grub
  dependencies:
    - init:workspace
    - test:acceptance:vexpress_qemu:uboot_uefi_grub
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true" && $BUILD_VEXPRESS_QEMU_UBOOT_UEFI_GRUB == "true"
  extends: .template_release_board_artifacts

# NOTE: vexpress-qemu-flash has no artifacts to publish
# release_board_artifacts:vexpress-qemu-flash:manual:
#   dependencies:
#     - init:workspace
#     - test:acceptance:vexpress_qemu:flash
#   when: manual
#   only:
#     variables:
#       - $BUILD_VEXPRESS_QEMU_FLASH == "true"
#   extends: .template_release_board_artifacts

# release_board_artifacts:vexpress-qemu-flash:automatic:
#   dependencies:
#     - init:workspace
#     - test:acceptance:vexpress_qemu:flash
#   only:
#     variables:
#       - $PUBLISH_RELEASE_AUTOMATIC == "true" && $BUILD_VEXPRESS_QEMU_FLASH == "true"
#   extends: .template_release_board_artifacts

release_board_artifacts:beagleboneblack:manual:
  variables:
    PUBLISH_BOARD_NAME: beagleboneblack
  dependencies:
    - init:workspace
    - build:acceptance:beagleboneblack
  when: manual
  only:
    variables:
      - $BUILD_BEAGLEBONEBLACK == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:beagleboneblack:automatic:
  variables:
    PUBLISH_BOARD_NAME: beagleboneblack
  dependencies:
    - init:workspace
    - build:acceptance:beagleboneblack
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true" && $BUILD_BEAGLEBONEBLACK == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:raspberrypi3:manual:
  variables:
    PUBLISH_BOARD_NAME: raspberrypi3
  dependencies:
    - init:workspace
    - build:acceptance:raspberrypi3
  when: manual
  only:
    variables:
      - $BUILD_RASPBERRYPI3 == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:raspberrypi3:automatic:
  variables:
    PUBLISH_BOARD_NAME: raspberrypi3
  dependencies:
    - init:workspace
    - build:acceptance:raspberrypi3
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true" && $BUILD_RASPBERRYPI3 == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:raspberrypi4:manual:
  variables:
    PUBLISH_BOARD_NAME: raspberrypi4
  dependencies:
    - init:workspace
    - build:acceptance:raspberrypi4
  when: manual
  only:
    variables:
      - $BUILD_RASPBERRYPI4 == "true"
  extends: .template_release_board_artifacts

release_board_artifacts:raspberrypi4:automatic:
  variables:
    PUBLISH_BOARD_NAME: raspberrypi4
  dependencies:
    - init:workspace
    - build:acceptance:raspberrypi4
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true" && $BUILD_RASPBERRYPI4 == "true"
  extends: .template_release_board_artifacts

.publish_helper_functions: &publish_helper_functions |
  # Bash function to check if the string is a final tag
  function is_final_tag () {
    local -r version="$1"
    [[ "${version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]
  }
  # Bash function to check if the string is a build tag
  function is_build_tag () {
    local -r version="$1"
    [[ "${version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-build[0-9]+$ ]]
  }
  # Bash function to check if the target binary already exists
  function is_published () {
    local -r bucket="$1"
    local -r path="$2"
    aws s3api head-object --bucket "${bucket}" --key "${path}" >/dev/null 2>&1
  }

.template_release_binary_tools:
  tags:
    - mender-qa-worker-generic-light
  # Jobs including this template must set either "dependencies" or "needs"
  # for "init:workspace", "build:mender-cli" and "build:mender-artifact".
  only:
    variables:
      - ($BUILD_SERVERS == "true" && $BUILD_CLIENT == "true") || $RUN_INTEGRATION_TESTS == "true"
  stage: release
  image: debian:buster
  before_script:
    - *publish_helper_functions
    # Install dependencies
    - apt update && apt install -yyq awscli git wget python3 python3-pip xz-utils
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip3 install -r requirements.txt
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.xz stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - xz -d /tmp/workspace.tar.xz
    - tar -xf /tmp/workspace.tar
    - mv /tmp/stage-artifacts .
  script:
    # mender-cli
    - mender_cli_version=$($WORKSPACE/integration/extra/release_tool.py --version-of mender-cli --in-integration-version $INTEGRATION_REV)
    - is_build_or_final_tag=0
    - if is_final_tag "${mender_cli_version}" || is_build_tag "${mender_cli_version}"; then
    -   echo "mender-cli v${mender_cli_version} is final or build tag."
    -   is_build_or_final_tag=1
    - fi
    - echo "=== mender-cli $mender_cli_version ==="
    # We can simplify once mender-cli 1.2.0 is not supported
    - if grep -q build-multiplatform $WORKSPACE/go/src/github.com/mendersoftware/mender-cli/Makefile; then
    -   key="mender-cli/${mender_cli_version}/linux/mender-cli"
    -   if [ $is_build_or_final_tag -eq 1 ] && is_published "mender" "${key}"; then
    -     echo "Not publishing ${key} as it exists and is a final or build tag."
    -   else
    -     echo "Publishing ${mender_cli_version} version for linux to S3"
    -     aws s3 cp stage-artifacts/mender-cli.linux.amd64 "s3://mender/${key}"
    -     aws s3api put-object-acl --acl public-read --bucket mender --key "${key}"
    -   fi

    -   key="mender-cli/${mender_cli_version}/darwin/mender-cli"
    -   if [ $is_build_or_final_tag -eq 1 ] && is_published "mender" "${key}"; then
    -     echo "Not publishing ${key} as it exists and is final or build tag."
    -   else
    -     echo "Publishing ${mender_cli_version} version for darwin to S3"
    -     aws s3 cp stage-artifacts/mender-cli.darwin.amd64 "s3://mender/${key}"
    -     aws s3api put-object-acl --acl public-read --bucket mender --key "${key}"
    -   fi
    - else
    -   key="mender-cli/${mender_cli_version}/mender-cli"
    -   if [ $is_build_or_final_tag -eq 1 ] && is_published "mender" "${key}"; then
    -     echo "Not publishing ${key} as it exists and is final or build tag."
    -   else
    -     aws s3 cp stage-artifacts/mender-cli "s3://mender/${key}"
    -     aws s3api put-object-acl --acl public-read --bucket mender --key "${key}"
    -   fi
    - fi
    # mender-artifact
    - mender_artifact_version=$($WORKSPACE/integration/extra/release_tool.py --version-of mender-artifact --in-integration-version $INTEGRATION_REV)
    - is_build_or_final_tag=0
    - if is_final_tag "${mender_artifact_version}" || is_build_tag "${mender_artifact_version}"; then
    -   echo "mender-artifact v${mender_artifact_version} is final or build tag."
    -   is_build_or_final_tag=1
    - fi
    - echo "=== mender-artifact $mender_artifact_version ==="
    - for bin in mender-artifact-darwin mender-artifact-linux mender-artifact-windows.exe; do
    -   platform=${bin#mender-artifact-}
    -   platform=${platform%.*}
    -   key="mender-artifact/${mender_artifact_version}/${platform}/mender-artifact"
    -   if [ $is_build_or_final_tag -eq 1 ] && is_published "mender" "${key}"; then
    -     echo "Not publishing ${key} as it exists and is final or build tag."
    -   else
    -     echo "Publishing ${mender_artifact_version} version for ${platform} to S3"
    -     aws s3 cp stage-artifacts/${bin} "s3://mender/${key}"
    -     aws s3api put-object-acl --acl public-read --bucket mender --key "${key}"
    -   fi
    - done

# Use "needs" for :manual to unlock mender-convert build in advance
# or to trigger it despite mender-qa tests errors
release_binary_tools:manual:
  when: manual
  needs:
    - init:workspace
    - build:mender-cli
    - build:mender-artifact
  extends: .template_release_binary_tools

release_binary_tools:automatic:
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true"
  dependencies:
    - init:workspace
    - build:mender-cli
    - build:mender-artifact
  extends: .template_release_binary_tools

.template_release_mender-monitor:
  tags:
    - mender-qa-worker-generic-light
  stage: release
  image: debian:buster
  variables:
    S3_BUCKET_NAME: "mender-binaries"
    S3_BUCKET_PATH: "mender-monitor/yocto"
  dependencies:
    - init:workspace
    - build:mender-monitor:package
  before_script:
    # Install dependencies
    - apt update && apt install -yyq awscli git wget python3 python3-pip xz-utils
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip3 install -r requirements.txt
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.xz stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - xz -d /tmp/workspace.tar.xz
    - tar -xf /tmp/workspace.tar
    - mv /tmp/stage-artifacts .
  script:
    - mender_monitor_version=$($WORKSPACE/integration/extra/release_tool.py --version-of monitor-client --in-integration-version $INTEGRATION_REV)
    - echo "=== mender-monitor $mender_monitor_version ==="
    - echo "Publishing $mender_monitor_version version to s3://$S3_BUCKET_NAME/$S3_BUCKET_PATH/$mender_monitor_version/"
    - aws s3 cp stage-artifacts/mender-monitor-*.tar.gz s3://$S3_BUCKET_NAME/$S3_BUCKET_PATH/$mender_monitor_version/

release_mender-monitor:manual:
  when: manual
  extends: .template_release_mender-monitor

release_mender-monitor:automatic:
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true"
  extends: .template_release_mender-monitor

.template_release_mender-gateway:
  tags:
    - mender-qa-worker-generic-light
  stage: release
  image: debian:buster
  variables:
    S3_BUCKET_NAME: "mender-binaries"
    S3_BUCKET_PATH_YOCTO: "mender-gateway/yocto"
    S3_BUCKET_PATH_EXAMPLES: "mender-gateway/examples"
  dependencies:
    - init:workspace
    - build:mender-gateway:package
  before_script:
    # Early exit when building an integration version without mender-gateway
    - apt update && apt install -yyq xz-utils
    - xz -d workspace.tar.xz
    - tar -tf workspace.tar
        ./go/src/github.com/mendersoftware/mender-gateway  >/dev/null 2>/dev/null || exit 0
    # Install dependencies
    - apt update && apt install -yyq awscli git wget python3 python3-pip
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip3 install -r requirements.txt
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar
    - mv /tmp/stage-artifacts .
  script:
    - mender_gateway_version=$($WORKSPACE/integration/extra/release_tool.py --version-of mender-gateway --in-integration-version $INTEGRATION_REV)
    - echo "=== mender-gateway $mender_gateway_version ==="
    - echo "Publishing $mender_gateway_version version to s3://$S3_BUCKET_NAME/$S3_BUCKET_PATH_YOCTO/$mender_gateway_version/"
    - aws s3 cp stage-artifacts/mender-gateway-*.tar.xz s3://$S3_BUCKET_NAME/$S3_BUCKET_PATH_YOCTO/$mender_gateway_version/
    - aws s3 cp stage-artifacts/mender-gateway-examples-*.tar s3://$S3_BUCKET_NAME/$S3_BUCKET_PATH_EXAMPLES/$mender_gateway_version/

release_mender-gateway:manual:
  when: manual
  extends: .template_release_mender-gateway

release_mender-gateway:automatic:
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true"
  extends: .template_release_mender-gateway

# This job allows mender repo to publish the related Docker client images on
# merges to master or release branches.
# Do not confuse with release_docker_images which publishes all images
# (including client ones) used during releases.
release_docker_images:automatic:client-only:
  tags:
    - mender-qa-worker-generic-light
  only:
    variables:
      - $PUBLISH_DOCKER_CLIENT_IMAGES == "true"
  stage: release
  image: docker
  services:
    - docker:dind
  dependencies:
    - init:workspace
    - build:client:qemu
    - build:client:docker
  before_script:
    # Check correct dind setup
    - docker version
    # Install dependencies
    - apk --update add git python3 py3-pip xz
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip3 install --break-system-packages -r requirements.txt
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.xz stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - xz -d /tmp/workspace.tar.xz
    - tar -xf /tmp/workspace.tar
    - mv /tmp/stage-artifacts .
    # Login for private repos
    - docker login -u menderbuildsystem -p ${DOCKER_HUB_PASSWORD}
    - docker login -u ntadm_menderci -p ${REGISTRY_MENDER_IO_PASSWORD} registry.mender.io
  script:
    # for pre 2.4.x releases, omit --version-type
    - if $WORKSPACE/integration/extra/release_tool.py --help | grep -e --version-type; then
    -   VERSION_TYPE_PARAMS="--version-type docker"
    - fi
    # Load, tag and push mender-client-* images
    - for image in $($WORKSPACE/integration/extra/release_tool.py --list docker | egrep 'mender-client|mender-qemu|mender-monitor|mender-gateway'); do
        version=$($WORKSPACE/integration/extra/release_tool.py --version-of $image $VERSION_TYPE_PARAMS --in-integration-version $INTEGRATION_REV);
        docker_url=$($WORKSPACE/integration/extra/release_tool.py --map-name docker $image docker_url);
        docker load -i stage-artifacts/${image}.tar;
        docker tag $docker_url:pr $docker_url:${version};
        docker push $docker_url:${version};
      done

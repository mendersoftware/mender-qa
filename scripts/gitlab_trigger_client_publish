#!/bin/bash

set -ex

# Number of release branches to build when trigger comes from meta-mender
NUMBER_OF_MINOR_VERSIONS=3

if [[ $# -eq 2 ]]; then
  version_to_publish=$1
  trigger_from_repo=$2
elif [[ $# -eq 1 ]]; then
  # Backwards compatibility
  version_to_publish=$1
  trigger_from_repo="mender"
else
  echo "Usage: $0 version repo" >&2
  exit 1
fi

INTEGRATION_COMPONENT="true"
if [ "$trigger_from_repo" = "meta-mender" ] || [ "$trigger_from_repo" = "mender-configure-module" ]; then
  INTEGRATION_COMPONENT="false"
fi

if [ "$INTEGRATION_COMPONENT" = "true" ]; then
  if ! grep -q "^${trigger_from_repo}\$" <<<$($WORKSPACE/integration/extra/release_tool.py --list git); then
    echo "Unrecognized repository $trigger_from_repo" >&2
    exit 1
  fi
fi

if [ -z "$MENDER_QA_TRIGGER_TOKEN" ]; then
  echo "MENDER_QA_TRIGGER_TOKEN not found in environment"
  exit 1
fi

if [ ! -d $WORKSPACE/integration ]; then
  echo "integration repo not found, expected at \$WORKSPACE/integration"
  exit 1
fi

# Get the integration versions to publish
if [ "$INTEGRATION_COMPONENT" = "false" ]; then
  cd $WORKSPACE/integration
  remote=$(git config -l | \
           sed -n -E 's|^remote\.([^.]+)\.url=.*github\.com[/:]mendersoftware/integration(\.git)?$|\1|p')

  if [ "$trigger_from_repo" = "meta-mender" ]; then
    # Special handling on meta-mender: publish master + last three releases
    integration_versions=$(git for-each-ref --sort=-creatordate --format='%(refname:short)' 'refs/tags' | \
                          sed -E '/(^[0-9]+\.[0-9]+)\.[0-9]+$/!d;s//\1.x/' | \
                          uniq | \
                          head -n $NUMBER_OF_MINOR_VERSIONS)
    integration_versions="$remote/master $integration_versions"
  else
    # For the rest: publish only master
    integration_versions="$remote/master"
  fi
  cd - >/dev/null
else
  # Integration versions including trigger_from_repo/version_to_publish
  integration_versions=$($WORKSPACE/integration/extra/release_tool.py \
                        --integration-versions-including $trigger_from_repo \
                        --version $version_to_publish)
fi

# For each integration version to publish:
# * construct a curl formatted string concatenating each repo and revision like:
#   '-F variables[repoA_REV]=X.X.x -F variables[repoB_REV]=X.X.x ...'
# * trigger a Mender QA pipeline to build/test/publish client
for integ_version in $integration_versions; do

  variables_revs=""

  all_repos=$($WORKSPACE/integration/extra/release_tool.py --list git)

  for repo in $all_repos; do
    repo_version=$($WORKSPACE/integration/extra/release_tool.py \
                   --version-of $repo \
                   --in-integration-version $integ_version |
                   cut -d/ -f2);
    variables_revs="$variables_revs $(echo -n -F variables[; \
                    echo -n $repo | tr '[a-z-]' '[A-Z_]'; \
                    echo _REV]=${repo_version})";
  done

  curl -v -f -X POST \
    -F token=$MENDER_QA_TRIGGER_TOKEN \
    -F ref=master \
    -F variables[PUBLISH_DOCKER_CLIENT_IMAGES]=true \
    -F variables[BUILD_CLIENT]=true \
    -F variables[BUILD_SERVERS]=false \
    -F variables[BUILD_QEMUX86_64_UEFI_GRUB]=false \
    -F variables[TEST_QEMUX86_64_UEFI_GRUB]=false \
    -F variables[BUILD_QEMUX86_64_BIOS_GRUB]=false \
    -F variables[TEST_QEMUX86_64_BIOS_GRUB]=false \
    -F variables[BUILD_QEMUX86_64_BIOS_GRUB_GPT]=false \
    -F variables[TEST_QEMUX86_64_BIOS_GRUB_GPT]=false \
    -F variables[BUILD_VEXPRESS_QEMU_UBOOT_UEFI_GRUB]=false \
    -F variables[TEST_VEXPRESS_QEMU_UBOOT_UEFI_GRUB]=false \
    -F variables[BUILD_VEXPRESS_QEMU]=false \
    -F variables[TEST_VEXPRESS_QEMU]=false \
    -F variables[BUILD_VEXPRESS_QEMU_FLASH]=false \
    -F variables[TEST_VEXPRESS_QEMU_FLASH]=false \
    -F variables[BUILD_BEAGLEBONEBLACK]=false \
    -F variables[TEST_BEAGLEBONEBLACK]=false \
    -F variables[BUILD_RASPBERRYPI3]=false \
    -F variables[TEST_RASPBERRYPI3]=false \
    -F variables[RUN_INTEGRATION_TESTS]=false \
    $variables_revs \
    https://gitlab.com/api/v4/projects/12501706/trigger/pipeline

done
